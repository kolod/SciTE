# Define SciTE settings for Assembler files (IA32 MASM and NASM)
# Originally by Black Horus blackhorus@gmx.net 2002
# Updated by Kein-Hong Man mkh@pl.jaring.my 2003-10
# Модернизирован UsAr <http://forum.ru-board.com/topic.cgi?forum=5&topic=3215&start=680#12>

# Masm files
import api\kernel32_
#import api\user32
#import api\myconst

file.patterns.asm=*.asm;*.mac
filter.asm=Assembler (asm mac)|$(file.patterns.asm)|

lexer.$(file.patterns.asm)=asm
lexer.$(file.patterns.bat)=asm
lexer.$(file.patterns.inc)=asm
lexer.$(file.patterns.mac)=asm

indent.size.*.asm=4
tab.size.*.asm=4
use.tabs.*.asm=0
use.monospaced=1

word.chars.asm=$(chars.alpha)$(chars.numeric)_.#$
word.characters.$(file.patterns.asm)=$(word.chars.asm)
calltip.asm.word.characters=$(chars.alpha)$(chars.numeric)_
calltip.asm.parameters.start=,
autocomplete.asm.start.characters=.

# Скобки
#braces.autoclose=1
#braces.open=({['"
#braces.close=)}]'"
braces.check=1
braces.asm.style=0
style.asm.34=fore:#00FFFF,back:#FF0000

api.$(file.patterns.asm)=$(SciteDefaultHome)\api\asm.api

#autocomplete.choose.single=1
autocomplete.*.ignorecase=0
calltip.*.ignorecase=0

fold.compact=1
#fold.preprocessor=1
#fold.at.Begin=1
#fold.at.Parenthese=1

#7
#statement.indent.$(file.patterns.asm)=7 .if .else .elseif
#?
#statement.end.$(file.patterns.asm)=7 .endif
#statement.end.$(file.patterns.asm)=20 ;
#statement.lookback.$(file.patterns.asm)=7 .endif

#block.start.$(file.patterns.asm)=7 .if .else .elseif
#block.end.$(file.patterns.asm)=7 .endif

#preprocessor.symbol.$(file.patterns.cpp)=
#preprocessor.start.$(file.patterns.asm)=.if
#preprocessor.middle.$(file.patterns.asm)=.else .elseif
#preprocessor.end.$(file.patterns.asm)=.endif


calltip.asm.word.characters=._$(chars.alpha)

keywords.$(file.patterns.asm).ignorecase=0

#folding
keywords.$(file.patterns.asm)=.break .do .else .if .for .function .elseif .ELSEIF if proc endp \
.repeat endif .endif .while .WHILE .until .IF .ENDIF Switch switch endsw Endsw Case case IFDEF \
MACRO macro ENDM endm IF ENDIF irpc forc ifnb FOR for IFNB IFIDN ifidn FORC REPEAT repeat \
struct struc STRUCT STRUC ends ENDS ifndef IFNDEF union UNION .endw .ENDW .REPEAT .UNTIL \
PROC ENDP .ELSE elseif else ELSEIF ELSE irp IRP ifdif IFDIF \

#directive
#keywords2.$(file.patterns.asm).ignorecase=1
keywords2.$(file.patterns.asm)=.186 .286 .286p .287 .386 .386p .387 .486 .486p .586 \
.586p .686 .686p .8086 .8087 .break .code .const .continue .cref .data .data? \
.err .errb .errdef .errdif .erre .erridn .errnb .errndef \
.errnz .list .listall .listif .listmacro .model .nocref .nolist .nolistif .nolistmacro \
.radix .tfcond .untilcxz casemap code data end entry \
executable extern externdef flat format gui import include includelib label library listmacroall \
none p186 p286 p286n p287 p386 p386n p387 p8086 p8087 private readable section segment stdcall \
writeable assume ptr public equ textequ proto PROTO EXITM .ERR \
SUBSTR substr exitm LOCAL local nothing STDCALL .MMX .mmx offset OFFSET sizeof SIZEOF \
align ALIGN \

#types & strucs
#keyword3.$(file.patterns.asm).ignorecase=0
keywords3.$(file.patterns.asm)=ANSI_STRING BITMAP BITMAPFILEHEADER BITMAPINFOHEADER \
BMPFILE BOOL BOOLEAN BYTE CALLBACK CHAR COLORREF DB DD DEVMODE DW DWORD WORD STARTUPINFO \
FILE_BASIC_INFORMATION FILE_DISPOSITION_INFORMATION FILE_END_OF_FILE_INFORMATION \
FILE_STANDARD_INFORMATION FLOAT FWORD GLDOUBLE GLFLOAT GLUINT GLYPHMETRICSFLOAT \
HACCEL HANDLE HBITMAP HBRUSH HCURSOR HDC HFONT HGDIOBJ HGLOBAL HGLRC HICON HINSTANCE \
HMENU HRGN HRSRC HWND IO_STATUS_BLOCK KEY_VALUE_PARTIAL_INFORMATION LONG LPARAM LPBYTE \
LPCSTR LPCVOID LPDWORD LPSTR LPVOID MSG NTSTATUS db dd dword byte word dw IMAGE_DOS_HEADER \
IMAGE_NT_HEADERS IMAGE_SECTION_HEADER IMAGE_DATA_DIRECTORY IMAGE_BASE_RELOCATION \
IMAGE_IMPORT_DESCRIPTOR IMAGE_IMPORT_BY_NAME WSADATA sockaddr PROCESS_INFORMATION \
SERVICE_STATUS SERVICE_TABLE_ENTRYA STARTUPINFOA MSGBOXPARAMS PROCESSENTRY32 WNDCLASSEX \
PAINTSTRUCT RECT TBADDBITMAP TBBUTTON OPENFILENAME OSVERSIONINFO INITCOMMONCONTROLSEX \
LOGBRUSH sockaddr_in SECURITY_ATTRIBUTES DRAWITEMSTRUCT DEBUG_EVENT CONTEXT SYSTEMTIME \
TOKEN_PRIVILEGES IMAGE_OPTIONAL_HEADER32 UINT WPARAM OBJECT_ATTRIBUTES \
EXPLICIT_ACCESS IMAGE_OPTIONAL_HEADER LOGFONT IMAGE_TLS_DIRECTORY32


#registers
#keyword4.$(file.patterns.asm).ignorecase=1
keywords4.$(file.patterns.asm)=ac af ah al ax bc bh bl bp bx cf ch cl cr0 \
cr1 cr2 cr3 cr4 cs cx df dh di dl dr0 dr1 dr2 dr3 dr4 dr5 dr6 dr7 \
ds dx eax ebp ebx ecx edi edx eip es esi esp fs gdtr gs idtr \
iopl ip ldtr mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 nf of pf rf sf si sp \
ss st st(0) st(1) st(2) st(3) st(4) st(5) st(6) st(7) tf tr tr1 tr10 \
tr11 tr12 tr2 tr3 tr4 tr5 tr6 tr7 tr8 tr9 vm zf

#macros
#keyword5.$(file.patterns.asm).ignorecase=0
keywords5.$(file.patterns.asm)=$ccounted_unicode_string $cta0 _add _cmp _cos pushsz $CT0 $CTA0 TA CTA \
_div _glclearcolor _glcleardepth _glcolor3f _glcolor4f _glnormal3f _glrasterpos2f TW CTW T CT $CTW $CT \
_glrotatef _glsquare _glsquare4f _gltexcoord2f _gltexture _gltranslatef _gluperspective $TA $TW $T TA0 \
_glvertex2f _glvertex3f _mov _mul _sin _sub add$ alloc alloc$ append append$ appmodel TW0 T0 CTA0 CTW0 \
appstart ASM beginmessageloop cadd caseelse cat$ chdir chr$ clockitstart clockitstop CT0 $TA0 $TW0 $T0 \
cls cmd$ ccounted_unicode_string cst cta0 CTXT ctw0 curdir$ ddproto declare $CTW0 COUNTED_UNICODE_STRING \
default dropfilename dstext endf endfn endmessageloop endsel fld10 fld4 fld8 CCOUNTED_UNICODE_STRING \
FLOAT10 FLOAT4 FLOAT8 fn FP10 FP4 FP8 fpc fptr free$ FUNC function getdllproc gl_dpush $COUNTED_UNICODE_STRING \
gl_fpush globals hex$ hiword hval initializeobjectattributes input inputfile invokez $CCOUNTED_UNICODE_STRING \
istring lcase$ left$ len limitwindowheight limitwindowwidth literal loadprocaddress lob $CTA xpush xpop \
loc loword ltrim$ m2m makedword max mcopy memalign min mkdir msgbox ofs sof sdd openfiledlg xmov flagset \
outputfile pcall popr print pth$ ptr$ pushr pushz remove$ reparg ret_f ret_t ret_x return xpop xpush \
retval rev$ RGB right$ rmdir rndir rtrim$ rv SADD sas savefiledlg scall select shellaboutbox \
showlasterror showregisters showreturn singleinstanceonly sstr$ stb str$ stralloc strfree sval \
sysdir$ szText trim$ tstarg ucase$ uhex$ usetitlebar ustr$ uval val windir$ write zero1 \
dpt bpt wpt include_ ifz ifnz iff ift @ift @iffnz @iffz push_ mov_eax mov_ebx mov_ecx mov_edx \
mov_esi mov_edi move hcall unicode hash dbginfo hialign lowalign repargv set setm movp \
addr mcall ADDR STRING IGLOBAL GLOBAL ppush ppushz $CCOUNTED_UNICODE_STRING InitializeObjectAttributes \

#API
#keyword6.$(file.patterns.asm).ignorecase=0
keywords6.$(file.patterns.asm)=GetModuleHandle DialogBoxParam ExitProcess SendMessage MessageBoxIndirect \
LoadIcon GetDlgItem CreateBrushIndirect GetClientRect FillRect GetDlgCtrlID SetTextColor DestroyIcon \
SetBkColor CreateSolidBrush IsDlgButtonChecked GetWindowText SetWindowText EnableWindow lstrcmp GlobalLock \
EndDialog DeleteObject DrawText UpdateWindow CreateFile GetFileSize VirtualAlloc ReadFile FindFirstFile \
VirtualFree SetFilePointer GlobalAlloc CloseHandle GlobalFree WriteFile MessageBox GetStdHandle SetFileTime \
GetCommandLine lstrcmpi CompareString GetOpenFileName GetSaveFileName CreateFileMapping MapViewOfFile \
lstrlen UnmapViewOfFile wsprintf wsprintfA VirtualProtect LoadLibrary GetProcAddress GetModuleHandleA \
GetModuleHandleW RegisterServiceCtrlHandlerA RtlZeroMemory SetServiceStatus WSAStartup WSASocketA \
htons GetEnvironmentVariableA listen GetStartupInfoA CreateProcessA closesocket WSACleanup GetCurrentDirectory \
accept OpenSCManagerA OpenServiceA CloseServiceHandle GetCommandLineA CreateServiceA StartServiceA \
StartServiceCtrlDispatcherA Sleep CreateToolhelp32Snapshot Process32First OpenProcess ReadProcessMemory \
VirtualAllocEx VirtualProtectEx Process32Next LoadCursor RegisterClassEx GetSystemMetrics CreateWindowEx \
LoadMenu SetMenu ShowWindow GetMessage TranslateMessage DispatchMessage BeginPaint EndPaint DefWindowProc \
PostQuitMessage GetSysColor CreatePen SelectObject MoveToEx LineTo AppendMenu FindNextFile GetFileTime \
ShellAbout MoveWindow CreateCompatibleDC GetPixel ExtFloodFill DeleteDC CreateStatusWindow \
InitCommonControls LoadBitmap GetDC ReleaseDC BitBlt GetTickCount SysAllocStringByteLen SysFreeString \
SetWindowLong CallWindowProc CreateDC GetWindowRect FrameWindow SetBkMode SetCapture GetWindowLong SetClassLong \
InvalidateRect ReleaseCapture GetParent DrawEdge CreateFont InitCommonControlsEx GetVersionEx SetTimer \
SetFocus GetDlgItemText KillTimer GetWindowLongA LoadImage SetForegroundWindow GetPercent FindWindow \
CreateMutex GetLastError GlobalFindAtom GlobalAddAtom GlobalDeleteAtom LoadLibraryA inet_addr WSASocket \
connect send recv MessageBoxA WriteProcessMemory CreateRemoteThread GetModuleFileNameA GetSystemDirectory \
SetCurrentDirectory CopyFile RegOpenKeyEx RegSetValueEx RegCloseKey WinExec FindWindowA GetWindowThreadProcessId \
lstrcat gethostbyname lstrcpy lstrcatA _lopen _lread _lclose CreatePipe CreateProcess TerminateProcess \
GetTempPath InternetOpenA InternetOpenUrlA InternetReadFile GetStartupInfo _lcreat _lwrite InternetCloseHandle \
GetVolumeInformation GetForegroundWindow GetWindowTextA lstrlenA StrStrIA GetClipboardOwner OpenClipboard \
EmptyClipboard CloseClipboard GetKeyboardState ToAscii GetKeyNameTextA lstrcpyA GetWindowsDirectoryA \
CreateFileA CreateThread SetWindowsHookExA UnhookWindowsHookEx socket gethostname lstrcmpA CopyFileA \
RegCreateKeyA RegSetValueExA ShellExecuteA WideCharToMultiByte CoTaskMemFree lstrcmpiA FindFirstUrlCacheEntryA \
FindNextUrlCacheEntryA FindCloseUrlCache DeleteFileA LocalAlloc CreateWindowExA SetWindowLongA GetMessageA \
DispatchMessageA FreeLibrary CoInitialize WaitForDebugEvent ContinueDebugEvent WaitForSingleObject \
GetSystemTime URLDownloadToFile GetSystemDirectoryA RegCreateKey setsockopt sendto RegDeleteKey \
OpenProcessToken LookupPrivilegeValue AdjustTokenPrivileges VirtualFreeEx MoveFile ResumeThread \
SetThreadContext GetThreadContext DeleteFile Thread32First OpenThread Thread32Next FlushInstructionCache \
GlobalUnlock CreateDialogParam GetMenu SendDlgItemMessage IsDialogMessage GetErrorString RtlFillMemory \
LoadString WSAGetLastError TranslateErrorCode ClearMessages SetDlgItemText EnableMenuItem WSAAsyncSelect \
RtlInitUnicodeString LdrLoadDll WSARecv sprintf GetModuleFileName SendDlgItemMessageA ZwOpenFile \
ZwSetInformationFile GetBrushOrgEx SetBrushOrgEx SetFileAttributes GetStockObject CreateFontIndirect \
GetObject ShellExecute SetCursor GetLocalTime fprintf fflush GetKeyState GetKeyNameText CallNextHookEx \
SetWindowsHookEx GetDesktopWindow EnumChildWindows SetWindowPos GetTempPathA SetCurrentDirectoryA \
GetUserNameA CreateMutexA DialogBoxParamA SetDlgItemTextA LoadLibraryEx GetSystemMenu

#Constants
#keywords7.$(file.patterns.asm)=$(myconst)
keywords7.$(file.patterns.asm)=WM_INITDIALOG WM_CLOSE NULL WM_SETTEXT WM_SETICON SWP_NOMOVE SW_MINIMIZE \
BS_SOLID WM_ERASEBKGND WM_CTLCOLORSTATIC WM_CTLCOLOREDIT WM_DRAWITEM WM_LBUTTONDOWN SW_NORMAL SYSTEM_FIXED_FONT \
WM_COMMAND WM_NCLBUTTONDOWN HTCAPTION OFN_FILEMUSTEXIST OFN_HIDEREADONLY OFN_EXPLORER OUT_DEFAULT_PRECIS \
OFN_LONGNAMES OFN_OVERWRITEPROMPT FALSE TRUE DT_CENTER DT_VCENTER DT_SINGLELINE GENERIC_WRITE DEFAULT_QUALITY \
GENERIC_READ FILE_SHARE_READ FILE_SHARE_WRITE OPEN_EXISTING FILE_ATTRIBUTE_NORMAL EN_CHANGE MB_ICONERROR \
MEM_COMMIT PAGE_READWRITE MEM_DECOMMIT FILE_BEGIN IMAGE_SCN_MEM_WRITE IMAGE_DOS_SIGNATURE IMAGE_NT_SIGNATURE \
IMAGE_DIR_IMPORT IMAGE_FILE_DLL IMAGE_DIR_TLS IMAGE_DIR_BASERELOC IMAGE_DIR_BOUND_IMPORT MFT_STRING IMAGE_DIR_DELAY_IMPORT \
IMAGE_DIR_IAT IMAGE_DIR_LOAD_CONFIG IMAGE_DIR_DEBUG GMEM_FIXED GMEM_ZEROINIT CREATE_ALWAYS MFT_SEPARATOR \
MB_ICONINFORMATION IMAGE_DIR_RESOURCE IMAGE_ORDINAL_FLAG32 TOKEN_ADJUST_PRIVILEGES TOKEN_QUERY MB_APPLMODAL \
SE_PRIVILEGE_ENABLED CREATE_SUSPENDED PAGE_EXECUTE_READWRITE MEM_RESERVE CONTEXT_FULL CRLF MB_USERICON \
STD_OUTPUT_HANDLE LOCALE_USER_DEFAULT NORM_IGNORECASE PAGE_READONLY FILE_MAP_READ INVALID_HANDLE_VALUE \
SEM_FAILCRITICALERRORS FILE_ATTRIBUTE_DIRECTORY ERROR_ALREADY_EXISTS IMAGE_SCN_MEM_EXECUTE GMEM_MOVEABLE \
IMAGE_SCN_CNT_CODE FILE_MAP_WRITE PAGE_NOACCESS IMAGE_DIRECTORY_ENTRY_EXPORT IMAGE_DIRECTORY_ENTRY_IMPORT \
IMAGE_DIRECTORY_ENTRY_BASERELOC SERVICE_WIN32_OWN_PROCESS SERVICE_RUNNING SERVICE_ACCEPT_SHUTDOWN IPPROTO_TCP \
SOCK_STREAM AF_INET STARTF_USESTDHANDLES STARTF_USESHOWWINDOW CREATE_NEW_CONSOLE SC_MANAGER_ALL_ACCESS \
SERVICE_START SERVICE_ALL_ACCESS SERVICE_AUTO_START SERVICE_ERROR_IGNORE TH32CS_SNAPPROCESS MB_ICONWARNING \
PROCESS_ALL_ACCESS SW_SHOWDEFAULT CS_HREDRAW CS_VREDRAW CS_BYTEALIGNWINDOW COLOR_BTNFACE IDC_ARROW DS_CENTER \
SM_CXSCREEN SM_CYSCREEN WS_EX_LEFT WS_OVERLAPPEDWINDOW SW_SHOWNORMAL WM_SYSCOMMAND SC_CLOSE MB_OK WS_TABSTOP \
WM_PAINT WM_CREATE MB_YESNO WM_DESTROY IDNO IDYES COLOR_BTNHIGHLIGHT COLOR_BTNSHADOW WS_CHILD IMAGE_DIR_EXPORT \
WS_VISIBLE WM_SYSCOLORCHANGE WM_SIZE TB_AUTOSIZE FLOODFILLSURFACE TBSTATE_ENABLED TBSTYLE_BUTTON IMAGE_DIR_EXCEPTION \
TB_ADDBUTTONS TBSTYLE_SEP TB_ADDBUTTONS TB_BUTTONSTRUCTSIZE TB_SETBITMAPSIZE TB_ADDBITMAP TB_SETBUTTONSIZE \
SBS_SIZEGRIP SB_SETPARTS WS_OVERLAPPED WS_SYSMENU WS_EX_ACCEPTFILES CS_BYTEALIGNCLIENT WM_DROPFILES IMAGE_DIR_SECURITY \
BM_SETIMAGE GWL_WNDPROC BS_ICON BS_BITMAP WM_KEYDOWN WM_KEYUP WM_LBUTTONUP COLOR_WINDOW WS_EX_OVERLAPPEDWINDO \
WS_POPUP WS_THICKFRAME WM_NCPAINT WM_SETFONT TRANSPARENT SW_RESTORE GCL_HBRBACKGROUND DT_RIGHT DT_LEFT \
EDGE_RAISED BF_RECT EDGE_SUNKEN DEFAULT_CHARSET OUT_TT_PRECIS CLIP_DEFAULT_PRECIS PROOF_QUALITY DEFAULT_PITCH \
FF_DONTCARE ICC_DATE_CLASSES WM_NOTIFY WM_TIMER SW_SHOWNA IMAGE_BITMAP LR_LOADTRANSPARENT LR_LOADMAP3DCOLORS \
SW_HIDE GWL_EXSTYLE WS_EX_OVERLAPPEDWINDOW DLL_PROCESS_ATTACH HKEY_LOCAL_MACHINE KEY_WRITE REG_SZ IMAGE_DIR_COPYRIGHT \
SOCKET_ERROR OF_READ OPEN_ALWAYS FILE_END WH_KEYBOARD WH_MOUSE HKEY_CURRENT_USER OFN_PATHMUSTEXIST DEBUG_PROCESS \
DEBUG_ONLY_THIS_PROCESS INFINITE EXIT_PROCESS_DEBUG_EVENT EXCEPTION_DEBUG_EVENT DBG_CONTINUE DBG_EXCEPTION_NOT_HANDLED \
CONTEXT_INTEGER SOCK_RAW IPPROTO_UDP IPPROTO_IP IP_HDRINCL SW_SHOW THREAD_ALL_ACCESS DLGWINDOWEXTRA IMAGE_DIR_GLOBALPTR \
PBM_SETRANGE PBM_SETPOS WM_SOCKET SB_SETTEXT MF_ENABLED MF_GRAYED PF_INET INADDR_NONE IMAGE_DIRECTORY_ENTRY_RESOURCE \
DONT_RESOLVE_DLL_REFERENCES LOAD_LIBRARY_AS_DATAFILE LOAD_WITH_ALTERED_SEARCH_PATH HWND_DESKTOP FILE_MAP_COPY \
CREATE_NEW OBJ_CASE_INSENSITIVE OBJ_KERNEL_HANDLE FILE_WRITE_ATTRIBUTES SYNCHRONIZE FILE_SYNCHRONOUS_IO_NONALERT \
WM_ACTIVATEAPP WM_GETFONT HOLLOW_BRUSH WM_NCHITTEST WM_SETCURSOR GWL_USERDATA WM_SYSKEYUP VK_LSHIFT VK_RSHIFT \
VK_CAPITAL VK_ESCAPE VK_BACK VK_TAB GWL_STYLE ES_PASSWORD EM_SETPASSWORDCHAR HWND_TOP HWND_TOPMOST SWP_NOSIZE \
WS_EX_WINDOWEDGE BS_PUSHLIKE BS_TEXT SS_LEFT WS_CAPTION WS_EX_CLIENTEDGE WS_BORDER ES_AUTOHSCROLL ES_READONLY \
IMAGE_DIR_COM_DESCRIPTOR

#cpu_instruction
keywords8.$(file.patterns.asm)=aaa aad aam aas adc add and arpl \
bound bsf bsr bswap bt btc btr bts call cbw cdq cinvoke clc cld \
cli clts cmc cmov cmp cmps cmpsb cmpsd cmpsw cmpxchg cmpxchg8b cpuid cwd \
cwde daa das dec div dup echo emms endm \
enter eq esc exitm f2xm1 fabs fadd faddp fbld fbstp fchs fclex \
fcmov fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr \
fdivrp feni ffree fiadd ficom ficomp fidiv fidivr fild fimul fincstp \
finit fist fistp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 \
fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave \
fnstcw fnstenv fnstsw for forc fpatan fprem fprem1 fptan frichop frinear \
frint2 frndint frstor frstpm fsave fscale fsetpm fsin fsincos fsqrt fst \
fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomp fucompp \
fwait fxam fxch fxtract fyl2x fyl2xp1 ge goto gt high highword hlt ibts icebp \
idiv imul in inc ins insb insd insw int into invd invlpg invoke iret iretd \
ja jae jb jbe jc jcxz je jecxz jg jge jl jle jmp jna jnae jnb jnbe jnc jne \
jng jnge jnl jnle jno jnp jns jnz jo jp jpe jpo js jz lahf lar lds le lea \
leave length lengthof les lfs lgdt lgs lidt lldt lmsw loadall lock \
lods lodsb lodsd lodsw loop loope loopne loopnz loopz low lowword lroffset \
lsl lss lt ltr macro mask mov movd movs movq movsb movsd movsw movsx movzx \
mul ne neg nop not opattr option or org out outs outsb outsd outsw \
packssdw packsswb paddb paddd paddsb paddsw paddusb paddusw paddw pand \
pandn pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pmaddwd pmulhw \
pmullw pop popa popad popcontext popf popfd por psrad psraw psrld \
psrlq psrlw pssld psslq psslw psubb psubd psubsb psubsw psubusb psubusw \
psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd \
purge push pusha pushad pushcontext pushf pushfd pxor rcl rcr rdmsr rdpmc rdtsc \
rdtsc record rep repe repeat repne repnz repz ret retf retn rol ror rsm sahf sal \
salc sar saveall sbb scas scasb scasd scasw seta setae setalc setb setbe setc sete \
setg setge setl setle setna setnae setnb setnbe setnc setne setng setnge \
setnl setnle setno setnp setns setnz seto setp setpe setpo sets setz sgdt \
shl shld short shr shrd sidt size sldt smi smsd smsw stc std sti \
stos stosb stosd stosw str sub test this type typedef \
umov uses verr verw wait wbinvd while width wrmsr xadd xbts xchg xlat xlatb xor

comment.block.asm=;
comment.block.at.line.start.asm=1
# comment.box.start.asm=[
# comment.box.end.asm=]

# Assembler Styles
#style.asm.32=$(font.code.base)
# Default
style.asm.0=fore:#FFFFFF,back:#000000
# Comment
style.asm.1=$(colour.code.comment.line)
# Number
style.asm.2=$(colour.number)
# String
style.asm.3=$(colour.string)
# Operator
#style.asm.4=$(colour.operator),bold
# Identifier
#style.asm.5=fore:#FFFFFF
# folding
style.asm.6=fore:#FF0000,back:#000000
# assembler Directive
style.asm.7=fore:#FF0000,back:#000000
# TYPES
style.asm.8=fore:#8080C0,back:#000000
# Register
style.asm.9=fore:#FF00FF,bold,back:#000000
# macroses
style.asm.10=fore:#008000,bold,back:#000000
# API
style.asm.15=fore:#FFFF00,back:#000000
# Const
style.asm.16=fore:#00FFFF,back:#000000
# CPU instruction
style.asm.17=$(colour.keyword),bold

# FPU instruction
#style.asm.8=$(colour.keyword)
# Extended instructions
#style.asm.9=fore:#B0FF00
# assembler Directive Operand
#style.asm.25=fore:#FF0000
# Comment block (GNU as /*...*/ syntax, unimplemented)
#style.asm.11=$(colour.code.comment.box),$(font.code.comment.box)
# Character/String (single quote) (also character prefix in GNU as)
style.asm.12=$(colour.string)
# End of line where string is not closed
style.asm.13=fore:#FF8000,back:#404040,eolfilled


command.compile.$(file.patterns.asm)=$(FileNameExt)

command.name.0.*.asm=Link
command.0.*.asm=link $(FileName)


#statement.indent.$(file.patterns.asm)=9 .if
#statement.end.$(file.patterns.asm)=9 .endif
#indent.size.*.asm=3
#statement.indent.*.asm=
#statement.end.*.asm=
#statement.lookback.*.asm=

#styling.within.preprocessor=0
#preprocessor.symbol.$(file.patterns.asm)=#
#preprocessor.start.$(file.patterns.asm)=if ifdef ifndef
#preprocessor.middle.$(file.patterns.asm)=else elseif
#preprocessor.end.$(file.patterns.asm)=endif

#statement.indent.$(file.patterns.asm)=5 do else function then
#statement.end.$(file.patterns.asm)=5 end until
#statement.lookback.$(file.patterns.asm)=20
#indent.maintain.$(file.patterns.asm)=1

command.help.$(file.patterns.asm)=$(CurrentWord)!$(SciteDefaultHome)\help\WIN32.HLP
command.help.subsystem.$(file.patterns.asm)=5
assert (v [, message]) error if v nil or false, otherwise returns v
collectgarbage ([limit]) set threshold to limit KBytes, default 0, may run GC
coroutine.create (f) creates coroutine from function f, returns coroutine
coroutine.resume (co, val1, ...) continues execution of co, returns bool status plus any values
coroutine.status (co) returns co status: "running", "suspended" or "dead"
coroutine.wrap (f) creates coroutine with body f, returns function that resumes co
coroutine.yield (val1, ...) suspend execution of calling coroutine
debug.debug () enters interactive debug mode, line with only "cont" terminates
debug.gethook () returns current hook function, hook mask, hook count
debug.getinfo (function [, what]) returns table with information about a function
debug.getlocal (level, local) returns name and value of local variable with index local at stack level
debug.getupvalue (func, up) returns name and value of upvalue with index up of function func
debug.sethook (hook, mask [, count]) sets given function as a hook, mask="[crl]"
debug.setlocal (level, local, value) sets local variable with index local at stack level with value
debug.setupvalue (func, up, value) sets upvalue with index up of function func with value
debug.traceback ([message]) returns a string with a traceback of the call stack
dofile (filename) executes as Lua chunk, default stdin, returns value
dostring (s) in SciTE, executes s as a Lua string, like Lua's dostring
error (message [, level]) terminates protected func, never returns, level 1 (default), 2=parent
gcinfo () returns dynamic mem in use (KB), and current GC threshold (KB)
getfenv (f) gets env, f can be a function or number (stack level, default=1), 0=global env
getmetatable (object) returns metatable of given object, otherwise nil
io.close ([file]) closes file, or the default output file
io.flush () flushes the default output file
io.input ([file]) opens file in text mode, sets as default input file, or returns current default input file
io.lines ([filename]) open file in read mode, returns iterator function to return lines, nil ends
io.open (filename [, mode]) opens file in specified mode "[rawb+]", returns handle or nil
io.output ([file]) opens file in text mode, sets as default output file, or returns current default output file
io.read (format1, ...) reads file according to given formats, returns read values or nil
io.tmpfile () returns a handle for a temporary file, opened in update mode
io.type (obj) returns "file" if obj is an open file handle, "close file" if closed, or nil if not a file handle
io.write (value1, ...) writes strings or numbers to file
ipairs (t) returns an iterator function, table t and 0
loadfile (filename) loads chunk without execution, returns chunk as function, else nil plus error
loadlib (libname, funcname) links to dynamic library libname, returns funcname as a C function
loadstring (string [, chunkname]) loads string as chunk, returns chunk as function, else nil plus error
math.abs (v) returns absolute value of v
math.acos (v) returns arc cosine value of v in radians
math.asin (v) returns arc sine value of v in radians
math.atan (v) returns arc tangent value of v in radians
math.atan2 (v1, v2) returns arc tangent value of v1/v2 in radians
math.ceil (v) returns smallest integer >= v
math.cos (rad) returns cosine value of angle rad
math.deg (rad) returns angle in degrees of radians rad
math.exp (v) returns e^v
math.floor (v) returns largest integer <= v
math.frexp (v) returns mantissa [0.5,1) and exponent values of v
math.ldexp (v1, v2) returns v1*2^v2
math.log (v) returns natural logarithm of v
math.log10 (v) returns logarithm 10 of v
math.max (v1, ...) returns maximum in a list of one or more values
math.min (v1, ...) returns minimum in a list of one or more values
math.mod (v1, v2) returns remainder of v1/v2 which is v1 - iV2 for some integer i
math.pow (v1, v2) returns v1 raised to the power of v2
math.rad (deg) returns angle in radians of degrees deg
math.random ([n [, u]]) returns random real [0,1), integer [1,n] or real [1,u] (with n=1)
math.randomseed (seed) sets seed for pseudo-random number generator
math.sin (rad) returns sine value of angle rad 
math.sqrt (v) returns square root of v
math.tan (rad) returns tangent value of angle rad  
next (table [, index]) returns next index,value pair, if index=nil (default), returns first index
os.clock () returns CPU time used by program in seconds
os.date ([format [, time]]) returns a string or table containing date and time, "*t" returns a table
os.difftime (t2, t1) returns number of seconds from time t1 to time t2
os.execute (command) executes command using C function system, returns status code
os.exit ([code]) terminates host program with optional code, default is success code
os.getenv (varname) returns value of environment variable varname. nil if not defined
os.remove (filename) deletes file with given name, nil if fails
os.rename (oldname, newname) renames file oldname to newname, nil if fails
os.setlocale (locale [, category]) set current locale of program, returns name of new locate or nil
os.time ([table]) returns current time (usually seconds) or time as represented by table
os.tmpname () returns a string with a filename for a temporary file (dangerous! tmpfile is better)
os.msgbox (<Text>, <Title>, <Options>) - Message Box. Return select button (only SciTE-Ru)
os.getfileattr (<FileName>) - return File Attribute as number (only SciTE-Ru)
os.setfileattr (<FileName>, <FileAttr>) - Set File Attribute (only SciTE-Ru)
os.run (Command, [WindowStyle], [WaitOnReturn]) (only SciTE-Ru)
pairs (t) returns the next function and table t plus a nil, iterates over all key-value pairs
pcall (f, arg1, arg2, ...) protected mode call, catches errors, returns status code first (true=success)
print (e1, e2, ...) prints values to stdout using tostring
rawequal (v1, v2) non-metamethod v1==v2, returns boolean
rawget (table, index) non-metamethod get value of table[index], index != nil
rawset (table, index, value) non-metamethod set value of table[index], index != nil
require (packagename) loads package, updates _LOADED, returns boolean
setfenv (f, table) sets env, f can be a function or number (stack level, default=1), 0=global env
setmetatable (table, metatable) sets metatable, nil to remove metatable
string.byte (s [, i]) returns numerical code, nil if index out of range, default i=1
string.char (i1, i2, ...) returns a string built from 0 or more integers
string.dump (function) returns binary representation of function, used with loadstring
string.find (s, pattern [, init [, plain]]) matches pattern in s, returns start,end indices, else nil
string.format (formatstring, e1, e2, ...) returns formatted string, printf-style
string.gfind (s, pat) returns iterator function that returns next captures from pattern pat on s
string.gsub (s, pat, repl [, n]) returns copy of s with pat replaced by repl, and substitutions made
string.len (s) returns string length
string.lower (s) returns string with letters in lower case
string.rep (s, n) returns string with n copies of string s
string.sub (s, i [, j]) returns substring from index i to j of s, default j=-1 (string length)
string.upper (s) returns string with letters in upper case
table.concat (table [, sep [, i [, j]]]) returns concatenated table elements i to j separated by sep
table.foreach (table, f) executes f(index,value) over all elements of table, returns first non-nil of f
table.foreachi (table, f) executes f(index,value) in sequential order 1 to n, returns first non-nil of f
table.getn (table) returns size of table, or n field, or table.setn value, or 1 less first index with nil value
table.insert (table, [pos,] value) insert value at location pos in table, default pos=n+1
table.remove (table [, pos]) removes element at pos from table, default pos=n
table.setn (table, n) sets size of table, n field of table if it exists
table.sort (table [, comp]) sorts in-place elements 1 to n, comp(v1,v2) should return true if v1<v2
tonumber (e [, base]) convert to number, returns number, nil if non-convertible, 2<=base<=36
tostring (e) convert to string, returns string
type (v) returns type of v as a string
unpack (list) returns all elements from list
xpcall (f, err) pcall function f with new error handler err

_ALERT (e1, e2, ...) prints values to stdout using tostring
_VERSION () returns version of Lua

trace(s) -  in SciTE, writes s to the output pane (no prefix, no newlines)
dostring(s) - executes s as a Lua string, like Lua 4's dostring

editor:textrange(startPos, endPos) - gets the text in the specified range
editor:findtext(text, [flags], [startPos, [endPos]]) - returns the start and end of the first match, or nil if no match
editor:match(text, [flags], [startPos]) - returns a generator that allows you to loop over the matches i.e. for m in editor:match(text, flags) do ... end
editor:append(text) - appends text to the end of the document
editor:insert(pos, text) - inserts text at the specified position
editor:remove(startPos, endPos) - removes the text in the range

output:textrange(startPos, endPos) - gets the text in the specified range
output:findtext(text, [flags], [startPos, [endPos]]) - returns the start and end of the first match, or nil if no match
output:match(text, [flags], [startPos]) - returns a generator that allows you to loop over the matches i.e. for m in output:match(text, flags) do ... end
output:append(text) - appends text to the end of the document
output:insert(pos, text) - inserts text at the specified position
output:remove(startPos, endPos) - removes the text in the range

scite.Open(filename) - opens a file in a new buffer
scite.ConstantName(number) returns the symbolic name of a Scintilla / SciTE constant
scite.MenuCommand(number) run specifed menu command
scite.MenuCommand("IDM_COMMAND") run specifed menu command (only SciTE-Ru)
scite.SendEditor(SCI_constant, ...) sends a message to the editor pane
scite.SendOutput(SCI_constant, ...) sends a message to the output pane
scite.ShowParametersDialog(text) show parametrs dialog with message (txt) and return result action (only SciTE-Ru)
scite.Perform("action") execute commands of SciTE Director Interface (only SciTE-Ru)
scite.UpdateStatusBar([bUpdateSlowData]) perform update status bar

props[string] = text_value

editor:AddRefDocument(int doc)\n Create a new document object. Starts with reference count of 1 and not selected into editor. Extend life of document.
editor:AddStyledText(int length, cells c)\n Add array of cells to document.
editor:AddText(int length, string text)\n Add text to the document at current position.
editor:Allocate(int bytes)\n Enlarge the document to a particular size of text bytes.
editor:AppendText(int length, string text)\n Append a string to the end of the document without changing the selection.
editor:AssignCmdKey(keymod km, int msg)\n When key+modifier combination km is pressed perform msg.
editor:AutoCActive() = bool\n Is there an auto-completion list visible?
editor:AutoCCancel()\n Remove the auto-completion list from the screen.
editor:AutoCComplete()\n User has selected an item so remove the list and insert the selection.
editor:AutoCGetCurrent() = int\n Get currently selected item position in the auto-completion list
editor:AutoCPosStart() = int pos\n Retrieve the position of the caret when the auto-completion list was displayed.
editor:AutoCSelect(string text)\n Select the item in the auto-completion list that starts with a string.
editor:AutoCShow(int lenEntered, string itemList)\n Display a auto-completion list. The lenEntered parameter indicates how many characters before the caret should be used to provide context.
editor:AutoCStops(string characterSet)\n Define a set of character that when typed cancel the auto-completion list.
editor:BackTab()\n Dedent the selected lines.
editor:BeginUndoAction()\n Start a sequence of actions that is undone and redone as a unit. May be nested.
editor:BraceBadLight(position pos)\n Highlight the character at a position indicating there is no matching brace.
editor:BraceHighlight(int posStart, int posEnd)\n Highlight the characters at two positions.
editor:BraceMatch(int pos) = int pos\n Find the position of a matching brace or INVALID_POSITION if no match.
editor:CallTipActive() = bool\n Is there an active call tip?
editor:CallTipCancel()\n Remove the call tip from the screen.
editor:CallTipPosStart() = int pos\n Retrieve the position where the caret was before displaying the call tip.
editor:CallTipSetHlt(int start, int end)\n Highlight a segment of the definition.
editor:CallTipShow(int pos, string definition)\n Show a call tip containing a definition near position pos.
editor:CanPaste() = bool\n Will a paste succeed?
editor:CanRedo() = bool\n Are there any redoable actions in the undo history?
editor:CanUndo() = bool\n Are there any undoable actions in the undo history?
editor:Cancel()\n Cancel any modes such as call tip or auto-completion list display.
editor:CharLeft()\n Move caret left one character.
editor:CharLeftExtend()\n Move caret left one character extending selection to new caret position.
editor:CharLeftRectExtend()\n Move caret left one character, extending rectangular selection to new caret position.
editor:CharRight()\n Move caret right one character.
editor:CharRightExtend()\n Move caret right one character extending selection to new caret position.
editor:CharRightRectExtend()\n Move caret right one character, extending rectangular selection to new caret position.
editor:ChooseCaretX()\n Set the last x chosen value to be the caret x position.
editor:Clear()\n Clear the selection.
editor:ClearAll()\n Delete all text in the document.
editor:ClearAllCmdKeys()\n Drop all key mappings.
editor:ClearCmdKey(int keymod)\n When key+modifier combination km is pressed do nothing.
editor:ClearDocumentStyle()\n Set all style bytes to 0, remove all folding information.
editor:ClearRegisteredImages()\n Clear all the registered XPM images.
editor:Colourise(int posStart, int posEnd)\n Colourise a segment of the document using the current lexing language.
editor:ConvertEOLs(int eolMode)\n Convert all line endings in the document to one mode.
editor:Copy()\n Copy the selection to the clipboard.
editor:CopyRange(int posStart, int posEnd)\n Copy a range of text to the clipboard. Positions are clipped into the document.
editor:CopyText(int length, string text)\n Copy argument text to the clipboard.
editor:CreateDocument() = int\n Create a new document object. Starts with reference count of 1 and not selected into editor.
editor:Cut()\n Cut the selection to the clipboard.
editor:DelLineLeft()\n Delete back from the current position to the start of the line.
editor:DelLineRight()\n Delete forwards from the current position to the end of the line.
editor:DelWordLeft()\n Delete the word to the left of the caret.
editor:DelWordRight()\n Delete the word to the right of the caret.
editor:DeleteBack()\n Delete the selection or if no selection, the character before the caret.
editor:DeleteBackNotLine()\n Delete the selection or if no selection, the character before the caret. Will not delete the character before at the start of a line.
editor:DocLineFromVisible(int lineDisplay) = int\n Find the document line of a display line taking hidden lines into account.
editor:DocumentEnd()\n Move caret to last position in document.
editor:DocumentEndExtend()\n Move caret to last position in document extending selection to new caret position.
editor:DocumentStart()\n Move caret to first position in document.
editor:DocumentStartExtend()\n Move caret to first position in document extending selection to new caret position.
editor:EditToggleOvertype()\n Switch from insert to overtype mode or the reverse.
editor:EmptyUndoBuffer()\n Delete the undo history.
editor:EncodedFromUTF8(string text)\n = string text
editor:EndUndoAction()\n End a sequence of actions that is undone and redone as a unit.
editor:EnsureVisible(int line)\n Ensure a particular line is visible by expanding any header line hiding it.
editor:EnsureVisibleEnforcePolicy(int line)\n Ensure a particular line is visible by expanding any header line hiding it. Use the currently set visibility policy to determine which range to display.
editor:FindColumn(int, int) = int
editor:FindText(int flags, findtext ft) = int pos\n Find some text in the document.
editor:FormFeed()\n Insert a Form Feed character.
editor:FormatRange(bool draw, formatrange fr) = int pos\n On Windows, will draw the document into a display context such as a printer.
editor:GetCurLine(int length, stringresult text) = string text\n Retrieve the text of the line containing the caret. Returns the index of the caret on the line.
editor:GetLastChild(int, int) = int
editor:GetLine(int line, stringresult text) = string text\n Retrieve the contents of a line. Returns the length of the line.
editor:GetLineSelEndPosition(int line) = int pos\n Retrieve the position of the end of the selection at the given line (INVALID_POSITION if no selection on this line)\n.
editor:GetLineSelStartPosition(int line) = int pos\n Retrieve the position of the start of the selection at the given line (INVALID_POSITION if no selection on this line).
editor:GetProperty(string text) = string text
editor:GetPropertyExpanded(string text) = string text
editor:GetSelText(stringresult text) = string text\n Retrieve the selected text. Return the length of the text.
editor:GetStyledText(textrange tr) = int\n Retrieve a buffer of cells. Returns the number of bytes in the buffer not including terminating NULs.
editor:GetText(int length, stringresult text) = string text\n Retrieve all the text in the document. Returns number of characters retrieved.
editor:GetTextRange(textrange tr) = int\n Retrieve a range of text. Return the length of the text.
editor:GotoLine(int line)\n Set caret to start of a line and ensure it is visible.
editor:GotoPos(int pos)\n Set caret to a position and ensure it is visible.
editor:GrabFocus()\n Set the focus to this Scintilla widget. GTK+ Specific.
editor:HideLines(int lineStart, int lineEnd)\n Make a range of lines invisible.
editor:HideSelection(bool normal)\n Draw the selection in normal style or with selection highlighted.
editor:Home()\n Move caret to first position on line.
editor:HomeDisplay()\n Move caret to first position on display line.
editor:HomeDisplayExtend()\n Move caret to first position on display line extending selection to new caret position.
editor:HomeExtend()\n Move caret to first position on line extending selection to new caret position.
editor:HomeRectExtend()\n Move caret to first position on line, extending rectangular selection to new caret position.
editor:HomeWrap()
editor:HomeWrapExtend()
editor:InsertText(int pos, string text)\n Insert string at a position. (position=-1 -> current position)
editor:LineCopy()\n Copy the line containing the caret.
editor:LineCut()\n Cut the line containing the caret.
editor:LineDelete()\n Delete the line containing the caret.
editor:LineDown()\n# Start of key messages Move caret down one line.
editor:LineDownExtend()\n Move caret down one line extending selection to new caret position.
editor:LineDownRectExtend()\n# RectExtended rectangular selection moves Move caret down one line, extending rectangular selection to new caret position.
editor:LineDuplicate()\n Duplicate the current line.
editor:LineEnd()\n Move caret to last position on line.
editor:LineEndDisplay()\n Move caret to last position on display line.
editor:LineEndDisplayExtend()\n Move caret to last position on display line extending selection to new caret position.
editor:LineEndExtend()\n Move caret to last position on line extending selection to new caret position.
editor:LineEndRectExtend()\n Move caret to last position on line, extending rectangular selection to new caret position.
editor:LineEndWrap()
editor:LineEndWrapExtend()
editor:LineFromPosition(int pos) = int line\n Retrieve the line containing a position.
editor:LineLength(int line) = int length\n How many characters are on a line, not including end of line characters?
editor:LineScroll(int columns, int lines)\n Scroll horizontally and vertically.
editor:LineScrollDown()\n Scroll the document down, keeping the caret visible.
editor:LineScrollUp()\n Scroll the document up, keeping the caret visible.
editor:LineTranspose()\n Switch the current line with the previous.
editor:LineUp()\n Move caret up one line.
editor:LineUpExtend()\n Move caret up one line extending selection to new caret position.
editor:LineUpRectExtend()\n Move caret up one line, extending rectangular selection to new caret position.
editor:LinesJoin()\n Join the lines in the target.
editor:LinesSplit(int pixelWidth)\n Split the lines in the target into lines that are less wide than pixelWidth where possible.
editor:LoadLexerLibrary(string path)\n Load a lexer library (dll / so).
editor:LowerCase()\n Transform the selection to lower case.
editor:MarkerAdd(int line, int markerNumber) = int\n Add a marker to a line, returning an ID which can be used to find or delete the marker.
editor:MarkerAddSet(int line, int markerNumber)
editor:MarkerDefine(int markerNumber, int markerSymbol)\n Set the symbol used for a particular marker number.
editor:MarkerDefinePixmap(int markerNumber, string pixmap)\n Define a marker from a pixmap.
editor:MarkerDelete(int line, int markerNumber)\n Delete a marker from a line.
editor:MarkerDeleteAll(int markerNumber)\n Delete all markers with a particular number from all lines.
editor:MarkerDeleteHandle(int handle)\n Delete a marker.
editor:MarkerGet(int line) = int\n Get a bit mask of all the markers set on a line.
editor:MarkerLineFromHandle(int handle) = int\n Retrieve the line number at which a particular marker is located.
editor:MarkerNext(int lineStart, int markerMask) = int\n Find the next line after lineStart that includes a marker in mask.
editor:MarkerPrevious(int lineStart, int markerMask) = int\n Find the previous line before lineStart that includes a marker in mask.
editor:MarkerSetAlpha(int markerNumber, int colour)
editor:MarkerSetBack(int markerNumber, colour back)\n Set the background colour used for a particular marker number.
editor:MarkerSetFore(int markerNumber, colour fore)\n Set the foreground colour used for a particular marker number.
editor:MoveCaretInsideView()\n Move the caret inside current view if it's not there already.
editor:NewLine()\n Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
editor:Null()\n Null operation.
editor:PageDown()\n Move caret one page down.
editor:PageDownExtend()\n Move caret one page down extending selection to new caret position.
editor:PageDownRectExtend()\n Move caret one page down, extending rectangular selection to new caret position.
editor:PageUp()\n Move caret one page up.
editor:PageUpExtend()\n Move caret one page up extending selection to new caret position.
editor:PageUpRectExtend()\n Move caret one page up, extending rectangular selection to new caret position.
editor:ParaDown()\n Move caret between paragraphs (delimited by empty lines).
editor:ParaDownExtend()\n Move caret between paragraphs (delimited by empty lines).
editor:ParaUp()\n Move caret between paragraphs (delimited by empty lines).
editor:ParaUpExtend()\n Move caret between paragraphs (delimited by empty lines).
editor:Paste()\n Paste the contents of the clipboard into the document replacing the selection.
editor:PointXFromPosition(int pos) = int\n Retrieve the x value of the point in the window where a position is displayed.
editor:PointYFromPosition(int pos) = int\n Retrieve the y value of the point in the window where a position is displayed.
editor:PositionAfter(int pos) = int pos\n Given a valid document position, return the next position taking code page into account. Maximum value returned is the last position in the document.
editor:PositionBefore(int pos) = int pos\n Given a valid document position, return the previous position taking code page into account. Returns 0 if passed 0.
editor:PositionFromLine(int line) = int pos\n Retrieve the position at the start of a line.
editor:PositionFromPoint(int x, int y) = int pos\n Find the position from a point within the window.
editor:PositionFromPointClose(int x, int y) = int pos\n Find the position from a point within the window but return INVALID_POSITION if not close to text.
editor:Redo()\n Redoes the next action on the undo history.
editor:RegisterImage(int type, string xpmData)\n Register an XPM image for use in autocompletion lists.
editor:ReleaseDocument(int doc)\n Create a new document object. Starts with reference count of 1 and not selected into editor.\n Extend life of document. Release a reference to the document, deleting document if it fades to black.
editor:ReplaceSel(string text)\n Replace the selected text with the argument text.
editor:ReplaceTarget(int length, string text) = int\n Replace the target text with the argument text. Text is counted so it can contain NULs. Returns the length of the replacement text.
editor:ReplaceTargetRE(int length, string text) = int\n Replace the target text with the argument text after \d processing. Text is counted so it can contain NULs.\n Looks for \d where d is between 1 and 9 and replaces these with the strings matched in the last search operation which were surrounded by \( and \).\n Returns the length of the replacement text including any change caused by processing the \d patterns.
editor:ScrollCaret()\n Ensure the caret is visible.
editor:SearchAnchor()\n Sets the current caret position to be the search anchor.
editor:SearchInTarget(int length, string text) = int\n Search for a counted string in the target and set the target to the found range. Text is counted so it can contain NULs.\n Returns length of range or -1 for failure in which case target is not moved.
editor:SearchNext(int flags, string text) = int\n Find some text starting at the search anchor. Does not ensure the selection is visible.
editor:SearchPrev(int flags, string text) = int\n Find some text starting at the search anchor and moving backwards. Does not ensure the selection is visible.
editor:SelectAll()\n Select all the text in the document.
editor:SelectionDuplicate()
editor:SetCaretPolicy(int caretPolicy, int caretSlop)\n CARET_POLICY changed in 1.47
editor:SetCharsDefault()\n Reset the set of characters for whitespace and word characters to the defaults.
editor:SetFoldFlags(int flags)\n Set some style options for folding.
editor:SetFoldMarginColour(bool useSetting, colour back)\n Set the colours used as a chequerboard pattern in the fold margin
editor:SetFoldMarginHiColour(bool useSetting, colour fore)\n Set the colours used as a chequerboard pattern in the fold margin
editor:SetLengthForEncode(int)
editor:SetSavePoint()\n Remember the current position in the undo history as the position at which the document was saved.
editor:SetSel(int posStart, int posEnd)\n Select a range of text.
editor:SetSelBack(bool useSetting, colour back)\n Set the background colour of the selection and whether to use this setting.
editor:SetSelFore(bool useSetting, colour fore)\n Set the foreground colour of the selection and whether to use this setting.
editor:SetStyling(int length, int style)\n Change style from current styling position for length characters to a style and move the current styling position to after this newly styled segment.\n (style sample: INDIC1_MASK)
editor:SetStylingEx(int length, string styles)\n Set the styles for a segment of the document.
editor:SetText(string text)\n Replace the contents of the document with the argument text.
editor:SetVisiblePolicy(int visiblePolicy, int visibleSlop)\n Constants for use with SetVisiblePolicy, similar to SetCaretPolicy.\n Set the way the display area is determined when a particular line is to be moved to by Find, FindNext, GotoLine, etc.
editor:SetWhitespaceBack(bool useSetting, colour back)\n Set the background colour of all whitespace and whether to use this setting.
editor:SetWhitespaceFore(bool useSetting, colour fore)\n Set the foreground colour of all whitespace and whether to use this setting.
editor:SetXCaretPolicy(int caretPolicy, int caretSlop)\n Set the way the caret is kept visible when going sideway. The exclusion zone is given in pixels.
editor:SetYCaretPolicy(int caretPolicy, int caretSlop)\n Set the way the line the caret is on is kept visible. The exclusion zone is given in lines.
editor:ShowLines(int lineStart, int lineEnd)\n Make a range of lines visible.
editor:StartRecord()\n Start notifying the container of all key presses and commands.
editor:StartStyling(int posStart, int mask)\n Set the current styling position to pos and the styling mask to mask. The styling mask can be used to protect some bits in each styling byte from modification. (mask sample: INDICS_MASK)\n
editor:StopRecord()\n Stop notifying the container of all key presses and commands.
editor:StutteredPageDown()\n Move caret to bottom of page, or one page down if already at bottom of page.
editor:StutteredPageDownExtend()\n Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.
editor:StutteredPageUp()\n Move caret to top of page, or one page up if already at top of page.
editor:StutteredPageUpExtend()\n Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.
editor:StyleClearAll()
editor:StyleResetDefault()\n Reset the default style to its state at startup
editor:Tab()\n If selection is empty or all on one line replace the selection with a tab character. If more than one line selected, indent the lines.
editor:TargetAsUTF8() = string text
editor:TargetFromSelection()\n Make the target range start and end be the same as the selection range start and end.
editor:TextHeight(int line) = int\n Retrieve the height of a particular line of text in pixels.
editor:TextWidth(int style, string text) = int\n Measure the pixel width of some text in a particular style. NUL terminated text argument. Does not handle tab or control characters.
editor:ToggleCaretSticky()
editor:ToggleFold(int line)\n Switch a header line between expanded and contracted.
editor:Undo()\n Undo one action in the undo history.
editor:UpperCase()\n Transform the selection to upper case.
editor:UsePopUp(bool allowPopUp)\n Set whether a pop up menu is displayed automatically when the user presses the wrong mouse button.
editor:UserListShow(int listType, string itemList)\n Display a list of strings and send notification when user chooses one.
editor:VCHome()\n Move caret to before first visible character on line. If already there move to first character on line.
editor:VCHomeExtend()\n Like VCHome but extending selection to new caret position.
editor:VCHomeRectExtend()\n Move caret to before first visible character on line. If already there move to first character on line.\n In either case, extend rectangular selection to new caret position.
editor:VCHomeWrap()
editor:VCHomeWrapExtend()
editor:VisibleFromDocLine(int line) = int\n Find the display line of a document line taking hidden lines into account.
editor:WordEndPosition(int pos, bool onlyWordCharacters) = int\n Get position of end of word.
editor:WordLeft()\n Move caret left one word.
editor:WordLeftEnd()\n Move caret left one word, position cursor at end of word.
editor:WordLeftEndExtend()\n Move caret left one word, position cursor at end of word, extending selection to new caret position.
editor:WordLeftExtend()\n Move caret left one word extending selection to new caret position.
editor:WordPartLeft()\n Move to the previous change in capitalisation.
editor:WordPartLeftExtend()\n Move to the previous change in capitalisation. Move to the previous change in capitalisation extending selection to new caret position.
editor:WordPartRight()\n Move to the previous change in capitalisation.\n Move to the previous change in capitalisation extending selection to new caret position.\n Move to the change next in capitalisation.
editor:WordPartRightExtend()\n Move to the previous change in capitalisation.\n Move to the previous change in capitalisation extending selection to new caret position.\n Move to the change next in capitalisation.\n Move to the next change in capitalisation extending selection to new caret position.
editor:WordRight()\n Move caret right one word.
editor:WordRightEnd()\n Move caret right one word, position cursor at end of word.
editor:WordRightEndExtend()\n Move caret right one word, position cursor at end of word, extending selection to new caret position.
editor:WordRightExtend()\n Move caret right one word extending selection to new caret position.
editor:WordStartPosition(int pos, bool) = int
editor:WordStartPosition(int pos, bool onlyWordCharacters) = int\n Get position of start of word.
editor:WrapCount(int) = int
editor:ZoomIn()\n Magnify the displayed text by increasing the sizes by 1 point.
editor:ZoomOut()\n Make the displayed text smaller by decreasing the sizes by 1 point.

editor.Anchor = position
editor.AutoCAutoHide = bool
editor.AutoCCancelAtStart = bool
editor.AutoCChooseSingle = bool
editor.AutoCDropRestOfWord = bool
editor.AutoCFillUps = string
editor.AutoCIgnoreCase = bool
editor.AutoCMaxHeight = int
editor.AutoCMaxWidth = int
editor.AutoCSeparator = int
editor.AutoCTypeSeparator = int
editor.BackSpaceUnIndents = bool
editor.BufferedDraw = bool
editor.CallTipBack = colour
editor.CallTipFore = colour
editor.CallTipForeHlt = colour
editor.CallTipUseStyle = int
editor.CaretFore = colour
editor.CaretLineBack = colour
editor.CaretLineBackAlpha = int
editor.CaretLineVisible = bool
editor.CaretPeriod = int
editor.CaretSticky = bool
editor.CaretWidth = int
editor.CharAt [position] = int
editor.CodePage = int
editor.Column [position] = int
editor.ControlCharSymbol = int
editor.CurrentPos = position
editor.Cursor = int
editor.DirectFunction = int
editor.DirectPointer = int
editor.DocPointer = int
editor.EOLMode = int
editor.EdgeColour = colour
editor.EdgeColumn = int
editor.EdgeMode = int
editor.EndAtLastLine = bool
editor.EndStyled = position
editor.FirstVisibleLine = int
editor.Focus = bool
editor.FoldExpanded [line_number] = bool
editor.FoldLevel [line_number] = int
editor.FoldParent [line_number] = int
editor.HScrollBar = bool
editor.HighlightGuide = int
editor.HotspotActiveBack [bool] = colour
editor.HotspotActiveFore [bool] = colour
editor.HotspotActiveUnderline = bool
editor.HotspotSingleLine = bool
editor.Indent = int
editor.IndentationGuides = bool
editor.IndicFore [int] = colour
editor.IndicStyle [int] = int
editor.KeyWords [int] = string
editor.LayoutCache = int
editor.Length = int
editor.Lexer = int
editor.LexerLanguage = string
editor.LineCount = int
editor.LineEndPosition [line_number] = int
editor.LineIndentPosition [line_number] = position
editor.LineIndentation [line_number] = int
editor.LineState [line_number] = int
editor.LineVisible [line_number] = bool
editor.LinesOnScreen = int
editor.MarginLeft = int
editor.MarginMaskN [int] = int
editor.MarginRight = int
editor.MarginSensitiveN [int] = bool
editor.MarginTypeN [int] = int
editor.MarginWidthN [int] = int
editor.MaxLineState = int
editor.ModEventMask = int
editor.Modify = bool
editor.MouseDownCaptures = bool
editor.MouseDwellTime = int
editor.Overtype = bool
editor.PasteConvertEndings = bool
editor.PrintColourMode = int
editor.PrintMagnification = int
editor.PrintWrapMode = int
editor.Property [string] = string
editor.PropertyInt [string] = int
editor.ReadOnly = bool
editor.ScrollWidth = int
editor.SearchFlags = int
editor.SelAlpha = int
editor.SelectionEnd = position
editor.SelectionIsRectangle = bool
editor.SelectionMode = int
editor.SelectionStart = position
editor.Status = int
editor.StyleAt [position] = int
editor.StyleBack [style_number] = colour
editor.StyleBits = int
editor.StyleBitsNeeded = int
editor.StyleBold [style_number] = bool
editor.StyleCase [style_number] = int
editor.StyleChangeable [style_number] = bool
editor.StyleCharacterSet [style_number] = int
editor.StyleEOLFilled [style_number] = bool
editor.StyleFont [style_number] = string
editor.StyleFore [style_number] = colour
editor.StyleHotSpot [style_number] = bool
editor.StyleItalic [style_number] = bool
editor.StyleSize [style_number] = int
editor.StyleUnderline [style_number] = bool
editor.StyleVisible [style_number] = bool
editor.TabIndents = bool
editor.TabWidth = int
editor.TargetEnd = position
editor.TargetStart = position
editor.TextLength = int
editor.TwoPhaseDraw = bool
editor.UndoCollection = bool
editor.UsePalette = bool
editor.UseTabs = bool
editor.VScrollBar = bool
editor.ViewEOL = bool
editor.ViewWS = int
editor.WhitespaceChars = string
editor.WordChars = string
editor.WrapMode = int
editor.WrapStartIndent = int
editor.WrapVisualFlags = int
editor.WrapVisualFlagsLocation = int
editor.XOffset = int
editor.Zoom = int

output:AddRefDocument(int doc)\n Create a new document object. Starts with reference count of 1 and not selected into output. Extend life of document.
output:AddStyledText(int length, cells c)\n Add array of cells to document.
output:AddText(int length, string text)\n Add text to the document at current position.
output:Allocate(int bytes)\n Enlarge the document to a particular size of text bytes.
output:AppendText(int length, string text)\n Append a string to the end of the document without changing the selection.
output:AssignCmdKey(keymod km, int msg)\n When key+modifier combination km is pressed perform msg.
output:AutoCActive() = bool\n Is there an auto-completion list visible?
output:AutoCCancel()\n Remove the auto-completion list from the screen.
output:AutoCComplete()\n User has selected an item so remove the list and insert the selection.
output:AutoCGetCurrent() = int\n Get currently selected item position in the auto-completion list
output:AutoCPosStart() = int pos\n Retrieve the position of the caret when the auto-completion list was displayed.
output:AutoCSelect(string text)\n Select the item in the auto-completion list that starts with a string.
output:AutoCShow(int lenEntered, string itemList)\n Display a auto-completion list. The lenEntered parameter indicates how many characters before the caret should be used to provide context.
output:AutoCStops(string characterSet)\n Define a set of character that when typed cancel the auto-completion list.
output:BackTab()\n Dedent the selected lines.
output:BeginUndoAction()\n Start a sequence of actions that is undone and redone as a unit. May be nested.
output:BraceBadLight(position pos)\n Highlight the character at a position indicating there is no matching brace.
output:BraceHighlight(int posStart, int posEnd)\n Highlight the characters at two positions.
output:BraceMatch(int pos) = int pos\n Find the position of a matching brace or INVALID_POSITION if no match.
output:CallTipActive() = bool\n Is there an active call tip?
output:CallTipCancel()\n Remove the call tip from the screen.
output:CallTipPosStart() = int pos\n Retrieve the position where the caret was before displaying the call tip.
output:CallTipSetHlt(int start, int end)\n Highlight a segment of the definition.
output:CallTipShow(int pos, string definition)\n Show a call tip containing a definition near position pos.
output:CanPaste() = bool\n Will a paste succeed?
output:CanRedo() = bool\n Are there any redoable actions in the undo history?
output:CanUndo() = bool\n Are there any undoable actions in the undo history?
output:Cancel()\n Cancel any modes such as call tip or auto-completion list display.
output:CharLeft()\n Move caret left one character.
output:CharLeftExtend()\n Move caret left one character extending selection to new caret position.
output:CharLeftRectExtend()\n Move caret left one character, extending rectangular selection to new caret position.
output:CharRight()\n Move caret right one character.
output:CharRightExtend()\n Move caret right one character extending selection to new caret position.
output:CharRightRectExtend()\n Move caret right one character, extending rectangular selection to new caret position.
output:ChooseCaretX()\n Set the last x chosen value to be the caret x position.
output:Clear()\n Clear the selection.
output:ClearAll()\n Delete all text in the document.
output:ClearAllCmdKeys()\n Drop all key mappings.
output:ClearCmdKey(int keymod)\n When key+modifier combination km is pressed do nothing.
output:ClearDocumentStyle()\n Set all style bytes to 0, remove all folding information.
output:ClearRegisteredImages()\n Clear all the registered XPM images.
output:Colourise(int posStart, int posEnd)\n Colourise a segment of the document using the current lexing language.
output:ConvertEOLs(int eolMode)\n Convert all line endings in the document to one mode.
output:Copy()\n Copy the selection to the clipboard.
output:CopyRange(int posStart, int posEnd)\n Copy a range of text to the clipboard. Positions are clipped into the document.
output:CopyText(int length, string text)\n Copy argument text to the clipboard.
output:CreateDocument() = int\n Create a new document object. Starts with reference count of 1 and not selected into output.
output:Cut()\n Cut the selection to the clipboard.
output:DelLineLeft()\n Delete back from the current position to the start of the line.
output:DelLineRight()\n Delete forwards from the current position to the end of the line.
output:DelWordLeft()\n Delete the word to the left of the caret.
output:DelWordRight()\n Delete the word to the right of the caret.
output:DeleteBack()\n Delete the selection or if no selection, the character before the caret.
output:DeleteBackNotLine()\n Delete the selection or if no selection, the character before the caret. Will not delete the character before at the start of a line.
output:DocLineFromVisible(int lineDisplay) = int\n Find the document line of a display line taking hidden lines into account.
output:DocumentEnd()\n Move caret to last position in document.
output:DocumentEndExtend()\n Move caret to last position in document extending selection to new caret position.
output:DocumentStart()\n Move caret to first position in document.
output:DocumentStartExtend()\n Move caret to first position in document extending selection to new caret position.
output:EditToggleOvertype()\n Switch from insert to overtype mode or the reverse.
output:EmptyUndoBuffer()\n Delete the undo history.
output:EncodedFromUTF8(string text)\n = string text
output:EndUndoAction()\n End a sequence of actions that is undone and redone as a unit.
output:EnsureVisible(int line)\n Ensure a particular line is visible by expanding any header line hiding it.
output:EnsureVisibleEnforcePolicy(int line)\n Ensure a particular line is visible by expanding any header line hiding it. Use the currently set visibility policy to determine which range to display.
output:FindColumn(int, int) = int
output:FindText(int flags, findtext ft) = int pos\n Find some text in the document.
output:FormFeed()\n Insert a Form Feed character.
output:FormatRange(bool draw, formatrange fr) = int pos\n On Windows, will draw the document into a display context such as a printer.
output:GetCurLine(int length, stringresult text) = string text\n Retrieve the text of the line containing the caret. Returns the index of the caret on the line.
output:GetLastChild(int, int) = int
output:GetLine(int line, stringresult text) = string text\n Retrieve the contents of a line. Returns the length of the line.
output:GetLineSelEndPosition(int line) = int pos\n Retrieve the position of the end of the selection at the given line (INVALID_POSITION if no selection on this line)\n.
output:GetLineSelStartPosition(int line) = int pos\n Retrieve the position of the start of the selection at the given line (INVALID_POSITION if no selection on this line).
output:GetProperty(string text) = string text
output:GetPropertyExpanded(string text) = string text
output:GetSelText(stringresult text) = string text\n Retrieve the selected text. Return the length of the text.
output:GetStyledText(textrange tr) = int\n Retrieve a buffer of cells. Returns the number of bytes in the buffer not including terminating NULs.
output:GetText(int length, stringresult text) = string text\n Retrieve all the text in the document. Returns number of characters retrieved.
output:GetTextRange(textrange tr) = int\n Retrieve a range of text. Return the length of the text.
output:GotoLine(int line)\n Set caret to start of a line and ensure it is visible.
output:GotoPos(int pos)\n Set caret to a position and ensure it is visible.
output:GrabFocus()\n Set the focus to this Scintilla widget. GTK+ Specific.
output:HideLines(int lineStart, int lineEnd)\n Make a range of lines invisible.
output:HideSelection(bool normal)\n Draw the selection in normal style or with selection highlighted.
output:Home()\n Move caret to first position on line.
output:HomeDisplay()\n Move caret to first position on display line.
output:HomeDisplayExtend()\n Move caret to first position on display line extending selection to new caret position.
output:HomeExtend()\n Move caret to first position on line extending selection to new caret position.
output:HomeRectExtend()\n Move caret to first position on line, extending rectangular selection to new caret position.
output:HomeWrap()
output:HomeWrapExtend()
output:InsertText(int pos, string text)\n Insert string at a position. (position=-1 -> current position)
output:LineCopy()\n Copy the line containing the caret.
output:LineCut()\n Cut the line containing the caret.
output:LineDelete()\n Delete the line containing the caret.
output:LineDown()\n# Start of key messages Move caret down one line.
output:LineDownExtend()\n Move caret down one line extending selection to new caret position.
output:LineDownRectExtend()\n# RectExtended rectangular selection moves Move caret down one line, extending rectangular selection to new caret position.
output:LineDuplicate()\n Duplicate the current line.
output:LineEnd()\n Move caret to last position on line.
output:LineEndDisplay()\n Move caret to last position on display line.
output:LineEndDisplayExtend()\n Move caret to last position on display line extending selection to new caret position.
output:LineEndExtend()\n Move caret to last position on line extending selection to new caret position.
output:LineEndRectExtend()\n Move caret to last position on line, extending rectangular selection to new caret position.
output:LineEndWrap()
output:LineEndWrapExtend()
output:LineFromPosition(int pos) = int line\n Retrieve the line containing a position.
output:LineLength(int line) = int length\n How many characters are on a line, not including end of line characters?
output:LineScroll(int columns, int lines)\n Scroll horizontally and vertically.
output:LineScrollDown()\n Scroll the document down, keeping the caret visible.
output:LineScrollUp()\n Scroll the document up, keeping the caret visible.
output:LineTranspose()\n Switch the current line with the previous.
output:LineUp()\n Move caret up one line.
output:LineUpExtend()\n Move caret up one line extending selection to new caret position.
output:LineUpRectExtend()\n Move caret up one line, extending rectangular selection to new caret position.
output:LinesJoin()\n Join the lines in the target.
output:LinesSplit(int pixelWidth,)\n Split the lines in the target into lines that are less wide than pixelWidth where possible.
output:LoadLexerLibrary(string path)\n Load a lexer library (dll / so).
output:LowerCase()\n Transform the selection to lower case.
output:MarkerAdd(int line, int markerNumber) = int\n Add a marker to a line, returning an ID which can be used to find or delete the marker.
output:MarkerAddSet(int line, int markerNumber)
output:MarkerDefine(int markerNumber, int markerSymbol)\n Set the symbol used for a particular marker number.
output:MarkerDefinePixmap(int markerNumber, string pixmap)\n Define a marker from a pixmap.
output:MarkerDelete(int line, int markerNumber)\n Delete a marker from a line.
output:MarkerDeleteAll(int markerNumber)\n Delete all markers with a particular number from all lines.
output:MarkerDeleteHandle(int handle)\n Delete a marker.
output:MarkerGet(int line) = int\n Get a bit mask of all the markers set on a line.
output:MarkerLineFromHandle(int handle) = int\n Retrieve the line number at which a particular marker is located.
output:MarkerNext(int lineStart, int markerMask) = int\n Find the next line after lineStart that includes a marker in mask.
output:MarkerPrevious(int lineStart, int markerMask) = int\n Find the previous line before lineStart that includes a marker in mask.
output:MarkerSetAlpha(int markerNumber, int colour)
output:MarkerSetBack(int markerNumber, colour back)\n Set the background colour used for a particular marker number.
output:MarkerSetFore(int markerNumber, colour fore)\n Set the foreground colour used for a particular marker number.
output:MoveCaretInsideView()\n Move the caret inside current view if it's not there already.
output:NewLine()\n Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
output:Null()\n Null operation.
output:PageDown()\n Move caret one page down.
output:PageDownExtend()\n Move caret one page down extending selection to new caret position.
output:PageDownRectExtend()\n Move caret one page down, extending rectangular selection to new caret position.
output:PageUp()\n Move caret one page up.
output:PageUpExtend()\n Move caret one page up extending selection to new caret position.
output:PageUpRectExtend()\n Move caret one page up, extending rectangular selection to new caret position.
output:ParaDown()\n Move caret between paragraphs (delimited by empty lines).
output:ParaDownExtend()\n Move caret between paragraphs (delimited by empty lines).
output:ParaUp()\n Move caret between paragraphs (delimited by empty lines).
output:ParaUpExtend()\n Move caret between paragraphs (delimited by empty lines).
output:Paste()\n Paste the contents of the clipboard into the document replacing the selection.
output:PointXFromPosition(int pos) = int\n Retrieve the x value of the point in the window where a position is displayed.
output:PointYFromPosition(int pos) = int\n Retrieve the y value of the point in the window where a position is displayed.
output:PositionAfter(int pos) = int pos\n Given a valid document position, return the next position taking code page into account. Maximum value returned is the last position in the document.
output:PositionBefore(int pos) = int pos\n Given a valid document position, return the previous position taking code page into account. Returns 0 if passed 0.
output:PositionFromLine(int line) = int pos\n Retrieve the position at the start of a line.
output:PositionFromPoint(int x, int y) = int pos\n Find the position from a point within the window.
output:PositionFromPointClose(int x, int y) = int pos\n Find the position from a point within the window but return INVALID_POSITION if not close to text.
output:Redo()\n Redoes the next action on the undo history.
output:RegisterImage(int type, string xpmData)\n Register an XPM image for use in autocompletion lists.
output:ReleaseDocument(int doc)\n Create a new document object. Starts with reference count of 1 and not selected into output.\n Extend life of document. Release a reference to the document, deleting document if it fades to black.
output:ReplaceSel(string text)\n Replace the selected text with the argument text.
output:ReplaceTarget(int length, string text) = int\n Replace the target text with the argument text. Text is counted so it can contain NULs. Returns the length of the replacement text.
output:ReplaceTargetRE(int length, string text) = int\n Replace the target text with the argument text after \d processing. Text is counted so it can contain NULs.\n Looks for \d where d is between 1 and 9 and replaces these with the strings matched in the last search operation which were surrounded by \( and \).\n Returns the length of the replacement text including any change caused by processing the \d patterns.
output:ScrollCaret()\n Ensure the caret is visible.
output:SearchAnchor()\n Sets the current caret position to be the search anchor.
output:SearchInTarget(int length, string text) = int\n Search for a counted string in the target and set the target to the found range. Text is counted so it can contain NULs.\n Returns length of range or -1 for failure in which case target is not moved.
output:SearchNext(int flags, string text) = int\n Find some text starting at the search anchor. Does not ensure the selection is visible.
output:SearchPrev(int flags, string text) = int\n Find some text starting at the search anchor and moving backwards. Does not ensure the selection is visible.
output:SelectAll()\n Select all the text in the document.
output:SelectionDuplicate()
output:SetCaretPolicy(int caretPolicy, int caretSlop)\n CARET_POLICY changed in 1.47
output:SetCharsDefault()\n Reset the set of characters for whitespace and word characters to the defaults.
output:SetFoldFlags(int flags)\n Set some style options for folding.
output:SetFoldMarginColour(bool useSetting, colour back)\n Set the colours used as a chequerboard pattern in the fold margin
output:SetFoldMarginHiColour(bool useSetting, colour fore)\n Set the colours used as a chequerboard pattern in the fold margin
output:SetLengthForEncode(int)
output:SetSavePoint()\n Remember the current position in the undo history as the position at which the document was saved.
output:SetSel(int posStart, int posEnd)\n Select a range of text.
output:SetSelBack(bool useSetting, colour back)\n Set the background colour of the selection and whether to use this setting.
output:SetSelFore(bool useSetting, colour fore)\n Set the foreground colour of the selection and whether to use this setting.
output:SetStyling(int length, int style)\n Change style from current styling position for length characters to a style and move the current styling position to after this newly styled segment.\n (style sample: INDIC1_MASK)
output:SetStylingEx(int length, string styles)\n Set the styles for a segment of the document.
output:SetText(string text)\n Replace the contents of the document with the argument text.
output:SetVisiblePolicy(int visiblePolicy, int visibleSlop)\n Constants for use with SetVisiblePolicy, similar to SetCaretPolicy.\n Set the way the display area is determined when a particular line is to be moved to by Find, FindNext, GotoLine, etc.
output:SetWhitespaceBack(bool useSetting, colour back)\n Set the background colour of all whitespace and whether to use this setting.
output:SetWhitespaceFore(bool useSetting, colour fore)\n Set the foreground colour of all whitespace and whether to use this setting.
output:SetXCaretPolicy(int caretPolicy, int caretSlop)\n Set the way the caret is kept visible when going sideway. The exclusion zone is given in pixels.
output:SetYCaretPolicy(int caretPolicy, int caretSlop)\n Set the way the line the caret is on is kept visible. The exclusion zone is given in lines.
output:ShowLines(int lineStart, int lineEnd)\n Make a range of lines visible.
output:StartRecord()\n Start notifying the container of all key presses and commands.
output:StartStyling(int posStart, int mask)\n Set the current styling position to pos and the styling mask to mask. The styling mask can be used to protect some bits in each styling byte from modification. (mask sample: INDICS_MASK)\n
output:StopRecord()\n Stop notifying the container of all key presses and commands.
output:StutteredPageDown()\n Move caret to bottom of page, or one page down if already at bottom of page.
output:StutteredPageDownExtend()\n Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.
output:StutteredPageUp()\n Move caret to top of page, or one page up if already at top of page.
output:StutteredPageUpExtend()\n Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.
output:StyleClearAll()
output:StyleResetDefault()\n Reset the default style to its state at startup
output:Tab()\n If selection is empty or all on one line replace the selection with a tab character. If more than one line selected, indent the lines.
output:TargetAsUTF8() = string text
output:TargetFromSelection()\n Make the target range start and end be the same as the selection range start and end.
output:TextHeight(int line) = int\n Retrieve the height of a particular line of text in pixels.
output:TextWidth(int style, string text) = int\n Measure the pixel width of some text in a particular style. NUL terminated text argument. Does not handle tab or control characters.
output:ToggleCaretSticky()
output:ToggleFold(int line)\n Switch a header line between expanded and contracted.
output:Undo()\n Undo one action in the undo history.
output:UpperCase()\n Transform the selection to upper case.
output:UsePopUp(bool allowPopUp)\n Set whether a pop up menu is displayed automatically when the user presses the wrong mouse button.
output:UserListShow(int listType, string itemList)\n Display a list of strings and send notification when user chooses one.
output:VCHome()\n Move caret to before first visible character on line. If already there move to first character on line.
output:VCHomeExtend()\n Like VCHome but extending selection to new caret position.
output:VCHomeRectExtend()\n Move caret to before first visible character on line. If already there move to first character on line.\n In either case, extend rectangular selection to new caret position.
output:VCHomeWrap()
output:VCHomeWrapExtend()
output:VisibleFromDocLine(int line) = int\n Find the display line of a document line taking hidden lines into account.
output:WordEndPosition(int pos, bool onlyWordCharacters) = int\n Get position of end of word.
output:WordLeft()\n Move caret left one word.
output:WordLeftEnd()\n Move caret left one word, position cursor at end of word.
output:WordLeftEndExtend()\n Move caret left one word, position cursor at end of word, extending selection to new caret position.
output:WordLeftExtend()\n Move caret left one word extending selection to new caret position.
output:WordPartLeft()\n Move to the previous change in capitalisation.
output:WordPartLeftExtend()\n Move to the previous change in capitalisation. Move to the previous change in capitalisation extending selection to new caret position.
output:WordPartRight()\n Move to the previous change in capitalisation.\n Move to the previous change in capitalisation extending selection to new caret position.\n Move to the change next in capitalisation.
output:WordPartRightExtend()\n Move to the previous change in capitalisation.\n Move to the previous change in capitalisation extending selection to new caret position.\n Move to the change next in capitalisation.\n Move to the next change in capitalisation extending selection to new caret position.
output:WordRight()\n Move caret right one word.
output:WordRightEnd()\n Move caret right one word, position cursor at end of word.
output:WordRightEndExtend()\n Move caret right one word, position cursor at end of word, extending selection to new caret position.
output:WordRightExtend()\n Move caret right one word extending selection to new caret position.
output:WordStartPosition(int pos, bool) = int
output:WordStartPosition(int pos, bool onlyWordCharacters) = int\n Get position of start of word.
output:WrapCount(int) = int
output:ZoomIn()\n Magnify the displayed text by increasing the sizes by 1 point.
output:ZoomOut()\n Make the displayed text smaller by decreasing the sizes by 1 point.

output.Anchor = position
output.AutoCAutoHide = bool
output.AutoCCancelAtStart = bool
output.AutoCChooseSingle = bool
output.AutoCDropRestOfWord = bool
output.AutoCFillUps = string
output.AutoCIgnoreCase = bool
output.AutoCMaxHeight = int
output.AutoCMaxWidth = int
output.AutoCSeparator = int
output.AutoCTypeSeparator = int
output.BackSpaceUnIndents = bool
output.BufferedDraw = bool
output.CallTipBack = colour
output.CallTipFore = colour
output.CallTipForeHlt = colour
output.CallTipUseStyle = int
output.CaretFore = colour
output.CaretLineBack = colour
output.CaretLineBackAlpha = int
output.CaretLineVisible = bool
output.CaretPeriod = int
output.CaretSticky = bool
output.CaretWidth = int
output.CharAt [position] = int
output.CodePage = int
output.Column [position] = int
output.ControlCharSymbol = int
output.CurrentPos = position
output.Cursor = int
output.DirectFunction = int
output.DirectPointer = int
output.DocPointer = int
output.EOLMode = int
output.EdgeColour = colour
output.EdgeColumn = int
output.EdgeMode = int
output.EndAtLastLine = bool
output.EndStyled = position
output.FirstVisibleLine = int
output.Focus = bool
output.FoldExpanded [line_number] = bool
output.FoldLevel [line_number] = int
output.FoldParent [line_number] = int
output.HScrollBar = bool
output.HighlightGuide = int
output.HotspotActiveBack [bool] = colour
output.HotspotActiveFore [bool] = colour
output.HotspotActiveUnderline = bool
output.HotspotSingleLine = bool
output.Indent = int
output.IndentationGuides = bool
output.IndicFore [int] = colour
output.IndicStyle [int] = int
output.KeyWords [int] = string
output.LayoutCache = int
output.Length = int
output.Lexer = int
output.LexerLanguage = string
output.LineCount = int
output.LineEndPosition [line_number] = int
output.LineIndentPosition [line_number] = position
output.LineIndentation [line_number] = int
output.LineState [line_number] = int
output.LineVisible [line_number] = bool
output.LinesOnScreen = int
output.MarginLeft = int
output.MarginMaskN [int] = int
output.MarginRight = int
output.MarginSensitiveN [int] = bool
output.MarginTypeN [int] = int
output.MarginWidthN [int] = int
output.MaxLineState = int
output.ModEventMask = int
output.Modify = bool
output.MouseDownCaptures = bool
output.MouseDwellTime = int
output.Overtype = bool
output.PasteConvertEndings = bool
output.PrintColourMode = int
output.PrintMagnification = int
output.PrintWrapMode = int
output.Property [string] = string
output.PropertyInt [string] = int
output.ReadOnly = bool
output.ScrollWidth = int
output.SearchFlags = int
output.SelAlpha = int
output.SelectionEnd = position
output.SelectionIsRectangle = bool
output.SelectionMode = int
output.SelectionStart = position
output.Status = int
output.StyleAt [position] = int
output.StyleBack [style_number] = colour
output.StyleBits = int
output.StyleBitsNeeded = int
output.StyleBold [style_number] = bool
output.StyleCase [style_number] = int
output.StyleChangeable [style_number] = bool
output.StyleCharacterSet [style_number] = int
output.StyleEOLFilled [style_number] = bool
output.StyleFont [style_number] = string
output.StyleFore [style_number] = colour
output.StyleHotSpot [style_number] = bool
output.StyleItalic [style_number] = bool
output.StyleSize [style_number] = int
output.StyleUnderline [style_number] = bool
output.StyleVisible [style_number] = bool
output.TabIndents = bool
output.TabWidth = int
output.TargetEnd = position
output.TargetStart = position
output.TextLength = int
output.TwoPhaseDraw = bool
output.UndoCollection = bool
output.UsePalette = bool
output.UseTabs = bool
output.VScrollBar = bool
output.ViewEOL = bool
output.ViewWS = int
output.WhitespaceChars = string
output.WordChars = string
output.WrapMode = int
output.WrapStartIndent = int
output.WrapVisualFlags = int
output.WrapVisualFlagsLocation = int
output.XOffset = int
output.Zoom = int

INVALID_POSITION = -1
SCI_START = 2000
SCI_OPTIONAL_START = 3000
SCI_LEXER_START = 4000
SCI_ADDTEXT = 2001
SCI_ADDSTYLEDTEXT = 2002
SCI_INSERTTEXT = 2003
SCI_CLEARALL = 2004
SCI_CLEARDOCUMENTSTYLE = 2005
SCI_GETLENGTH = 2006
SCI_GETCHARAT = 2007
SCI_GETCURRENTPOS = 2008
SCI_GETANCHOR = 2009
SCI_GETSTYLEAT = 2010
SCI_REDO = 2011
SCI_SETUNDOCOLLECTION = 2012
SCI_SELECTALL = 2013
SCI_SETSAVEPOINT = 2014
SCI_GETSTYLEDTEXT = 2015
SCI_CANREDO = 2016
SCI_MARKERLINEFROMHANDLE = 2017
SCI_MARKERDELETEHANDLE = 2018
SCI_GETUNDOCOLLECTION = 2019
SCWS_INVISIBLE = 0
SCWS_VISIBLEALWAYS = 1
SCWS_VISIBLEAFTERINDENT = 2
SCI_GETVIEWWS = 2020
SCI_SETVIEWWS = 2021
SCI_POSITIONFROMPOINT = 2022
SCI_POSITIONFROMPOINTCLOSE = 2023
SCI_GOTOLINE = 2024
SCI_GOTOPOS = 2025
SCI_SETANCHOR = 2026
SCI_GETCURLINE = 2027
SCI_GETENDSTYLED = 2028
SC_EOL_CRLF = 0
SC_EOL_CR = 1
SC_EOL_LF = 2
SCI_CONVERTEOLS = 2029
SCI_GETEOLMODE = 2030
SCI_SETEOLMODE = 2031
SCI_STARTSTYLING = 2032
SCI_SETSTYLING = 2033
SCI_GETBUFFEREDDRAW = 2034
SCI_SETBUFFEREDDRAW = 2035
SCI_SETTABWIDTH = 2036
SCI_GETTABWIDTH = 2121
SC_CP_UTF8 = 65001
SC_CP_DBCS = 1
SCI_SETCODEPAGE = 2037
SCI_SETUSEPALETTE = 2039
MARKER_MAX = 31
SC_MARK_CIRCLE = 0
SC_MARK_ROUNDRECT = 1
SC_MARK_ARROW = 2
SC_MARK_SMALLRECT = 3
SC_MARK_SHORTARROW = 4
SC_MARK_EMPTY = 5
SC_MARK_ARROWDOWN = 6
SC_MARK_MINUS = 7
SC_MARK_PLUS = 8
SC_MARK_VLINE = 9
SC_MARK_LCORNER = 10
SC_MARK_TCORNER = 11
SC_MARK_BOXPLUS = 12
SC_MARK_BOXPLUSCONNECTED = 13
SC_MARK_BOXMINUS = 14
SC_MARK_BOXMINUSCONNECTED = 15
SC_MARK_LCORNERCURVE = 16
SC_MARK_TCORNERCURVE = 17
SC_MARK_CIRCLEPLUS = 18
SC_MARK_CIRCLEPLUSCONNECTED = 19
SC_MARK_CIRCLEMINUS = 20
SC_MARK_CIRCLEMINUSCONNECTED = 21
SC_MARK_BACKGROUND = 22
SC_MARK_DOTDOTDOT = 23
SC_MARK_ARROWS = 24
SC_MARK_PIXMAP = 25
SC_MARK_FULLRECT = 26
SC_MARK_CHARACTER = 10000
SC_MARKNUM_FOLDEREND = 25
SC_MARKNUM_FOLDEROPENMID = 26
SC_MARKNUM_FOLDERMIDTAIL = 27
SC_MARKNUM_FOLDERTAIL = 28
SC_MARKNUM_FOLDERSUB = 29
SC_MARKNUM_FOLDER = 30
SC_MARKNUM_FOLDEROPEN = 31
SC_MASK_FOLDERS = 0xFE000000
SCI_MARKERDEFINE = 2040
SCI_MARKERSETFORE = 2041
SCI_MARKERSETBACK = 2042
SCI_MARKERADD = 2043
SCI_MARKERDELETE = 2044
SCI_MARKERDELETEALL = 2045
SCI_MARKERGET = 2046
SCI_MARKERNEXT = 2047
SCI_MARKERPREVIOUS = 2048
SCI_MARKERDEFINEPIXMAP = 2049
SCI_MARKERADDSET = 2466
SCI_MARKERSETALPHA = 2476
SC_MARGIN_SYMBOL = 0
SC_MARGIN_NUMBER = 1
SC_MARGIN_BACK = 2
SC_MARGIN_FORE = 3
SCI_SETMARGINTYPEN = 2240
SCI_GETMARGINTYPEN = 2241
SCI_SETMARGINWIDTHN = 2242
SCI_GETMARGINWIDTHN = 2243
SCI_SETMARGINMASKN = 2244
SCI_GETMARGINMASKN = 2245
SCI_SETMARGINSENSITIVEN = 2246
SCI_GETMARGINSENSITIVEN = 2247
STYLE_DEFAULT = 32
STYLE_LINENUMBER = 33
STYLE_BRACELIGHT = 34
STYLE_BRACEBAD = 35
STYLE_CONTROLCHAR = 36
STYLE_INDENTGUIDE = 37
STYLE_CALLTIP = 38
STYLE_LASTPREDEFINED = 39
STYLE_MAX = 127
SC_CHARSET_ANSI = 0
SC_CHARSET_DEFAULT = 1
SC_CHARSET_BALTIC = 186
SC_CHARSET_CHINESEBIG5 = 136
SC_CHARSET_EASTEUROPE = 238
SC_CHARSET_GB2312 = 134
SC_CHARSET_GREEK = 161
SC_CHARSET_HANGUL = 129
SC_CHARSET_MAC = 77
SC_CHARSET_OEM = 255
SC_CHARSET_RUSSIAN = 204
SC_CHARSET_CYRILLIC = 1251
SC_CHARSET_SHIFTJIS = 128
SC_CHARSET_SYMBOL = 2
SC_CHARSET_TURKISH = 162
SC_CHARSET_JOHAB = 130
SC_CHARSET_HEBREW = 177
SC_CHARSET_ARABIC = 178
SC_CHARSET_VIETNAMESE = 163
SC_CHARSET_THAI = 222
SC_CHARSET_8859_15 = 1000
SCI_STYLECLEARALL = 2050
SCI_STYLESETFORE = 2051
SCI_STYLESETBACK = 2052
SCI_STYLESETBOLD = 2053
SCI_STYLESETITALIC = 2054
SCI_STYLESETSIZE = 2055
SCI_STYLESETFONT = 2056
SCI_STYLESETEOLFILLED = 2057
SCI_STYLERESETDEFAULT = 2058
SCI_STYLESETUNDERLINE = 2059
SC_CASE_MIXED = 0
SC_CASE_UPPER = 1
SC_CASE_LOWER = 2
SCI_STYLESETCASE = 2060
SCI_STYLESETCHARACTERSET = 2066
SCI_STYLESETHOTSPOT = 2409
SCI_SETSELFORE = 2067
SCI_SETSELBACK = 2068
SCI_GETSELALPHA = 2477
SCI_SETSELALPHA = 2478
SCI_SETCARETFORE = 2069
SCI_ASSIGNCMDKEY = 2070
SCI_CLEARCMDKEY = 2071
SCI_CLEARALLCMDKEYS = 2072
SCI_SETSTYLINGEX = 2073
SCI_STYLESETVISIBLE = 2074
SCI_GETCARETPERIOD = 2075
SCI_SETCARETPERIOD = 2076
SCI_SETWORDCHARS = 2077
SCI_BEGINUNDOACTION = 2078
SCI_ENDUNDOACTION = 2079
INDIC_MAX = 7
INDIC_PLAIN = 0
INDIC_SQUIGGLE = 1
INDIC_TT = 2
INDIC_DIAGONAL = 3
INDIC_STRIKE = 4
INDIC_HIDDEN = 5
INDIC_BOX = 6
INDIC_ROUNDBOX = 7
INDIC0_MASK = 0x20
INDIC1_MASK = 0x40
INDIC2_MASK = 0x80
INDICS_MASK = 0xE0
SCI_INDICSETSTYLE = 2080
SCI_INDICGETSTYLE = 2081
SCI_INDICSETFORE = 2082
SCI_INDICGETFORE = 2083
SCI_SETWHITESPACEFORE = 2084
SCI_SETWHITESPACEBACK = 2085
SCI_SETSTYLEBITS = 2090
SCI_GETSTYLEBITS = 2091
SCI_SETLINESTATE = 2092
SCI_GETLINESTATE = 2093
SCI_GETMAXLINESTATE = 2094
SCI_GETCARETLINEVISIBLE = 2095
SCI_SETCARETLINEVISIBLE = 2096
SCI_GETCARETLINEBACK = 2097
SCI_SETCARETLINEBACK = 2098
SCI_STYLESETCHANGEABLE = 2099
SCI_AUTOCSHOW = 2100
SCI_AUTOCCANCEL = 2101
SCI_AUTOCACTIVE = 2102
SCI_AUTOCPOSSTART = 2103
SCI_AUTOCCOMPLETE = 2104
SCI_AUTOCSTOPS = 2105
SCI_AUTOCSETSEPARATOR = 2106
SCI_AUTOCGETSEPARATOR = 2107
SCI_AUTOCSELECT = 2108
SCI_AUTOCSETCANCELATSTART = 2110
SCI_AUTOCGETCANCELATSTART = 2111
SCI_AUTOCSETFILLUPS = 2112
SCI_AUTOCSETCHOOSESINGLE = 2113
SCI_AUTOCGETCHOOSESINGLE = 2114
SCI_AUTOCSETIGNORECASE = 2115
SCI_AUTOCGETIGNORECASE = 2116
SCI_USERLISTSHOW = 2117
SCI_AUTOCSETAUTOHIDE = 2118
SCI_AUTOCGETAUTOHIDE = 2119
SCI_AUTOCSETDROPRESTOFWORD = 2270
SCI_AUTOCGETDROPRESTOFWORD = 2271
SCI_REGISTERIMAGE = 2405
SCI_CLEARREGISTEREDIMAGES = 2408
SCI_AUTOCGETTYPESEPARATOR = 2285
SCI_AUTOCSETTYPESEPARATOR = 2286
SCI_AUTOCSETMAXWIDTH = 2208
SCI_AUTOCGETMAXWIDTH = 2209
SCI_AUTOCSETMAXHEIGHT = 2210
SCI_AUTOCGETMAXHEIGHT = 2211
SCI_SETINDENT = 2122
SCI_GETINDENT = 2123
SCI_SETUSETABS = 2124
SCI_GETUSETABS = 2125
SCI_SETLINEINDENTATION = 2126
SCI_GETLINEINDENTATION = 2127
SCI_GETLINEINDENTPOSITION = 2128
SCI_GETCOLUMN = 2129
SCI_SETHSCROLLBAR = 2130
SCI_GETHSCROLLBAR = 2131
SCI_SETINDENTATIONGUIDES = 2132
SCI_GETINDENTATIONGUIDES = 2133
SCI_SETHIGHLIGHTGUIDE = 2134
SCI_GETHIGHLIGHTGUIDE = 2135
SCI_GETLINEENDPOSITION = 2136
SCI_GETCODEPAGE = 2137
SCI_GETCARETFORE = 2138
SCI_GETUSEPALETTE = 2139
SCI_GETREADONLY = 2140
SCI_SETCURRENTPOS = 2141
SCI_SETSELECTIONSTART = 2142
SCI_GETSELECTIONSTART = 2143
SCI_SETSELECTIONEND = 2144
SCI_GETSELECTIONEND = 2145
SCI_SETPRINTMAGNIFICATION = 2146
SCI_GETPRINTMAGNIFICATION = 2147
SC_PRINT_NORMAL = 0
SC_PRINT_INVERTLIGHT = 1
SC_PRINT_BLACKONWHITE = 2
SC_PRINT_COLOURONWHITE = 3
SC_PRINT_COLOURONWHITEDEFAULTBG = 4
SCI_SETPRINTCOLOURMODE = 2148
SCI_GETPRINTCOLOURMODE = 2149
SCFIND_WHOLEWORD = 2
SCFIND_MATCHCASE = 4
SCFIND_WORDSTART = 0x00100000
SCFIND_REGEXP = 0x00200000
SCFIND_POSIX = 0x00400000
SCI_FINDTEXT = 2150
SCI_FORMATRANGE = 2151
SCI_GETFIRSTVISIBLELINE = 2152
SCI_GETLINE = 2153
SCI_GETLINECOUNT = 2154
SCI_SETMARGINLEFT = 2155
SCI_GETMARGINLEFT = 2156
SCI_SETMARGINRIGHT = 2157
SCI_GETMARGINRIGHT = 2158
SCI_GETMODIFY = 2159
SCI_SETSEL = 2160
SCI_GETSELTEXT = 2161
SCI_GETTEXTRANGE = 2162
SCI_HIDESELECTION = 2163
SCI_POINTXFROMPOSITION = 2164
SCI_POINTYFROMPOSITION = 2165
SCI_LINEFROMPOSITION = 2166
SCI_POSITIONFROMLINE = 2167
SCI_LINESCROLL = 2168
SCI_SCROLLCARET = 2169
SCI_REPLACESEL = 2170
SCI_SETREADONLY = 2171
SCI_NULL = 2172
SCI_CANPASTE = 2173
SCI_CANUNDO = 2174
SCI_EMPTYUNDOBUFFER = 2175
SCI_UNDO = 2176
SCI_CUT = 2177
SCI_COPY = 2178
SCI_PASTE = 2179
SCI_CLEAR = 2180
SCI_SETTEXT = 2181
SCI_GETTEXT = 2182
SCI_GETTEXTLENGTH = 2183
SCI_GETDIRECTFUNCTION = 2184
SCI_GETDIRECTPOINTER = 2185
SCI_SETOVERTYPE = 2186
SCI_GETOVERTYPE = 2187
SCI_SETCARETWIDTH = 2188
SCI_GETCARETWIDTH = 2189
SCI_SETTARGETSTART = 2190
SCI_GETTARGETSTART = 2191
SCI_SETTARGETEND = 2192
SCI_GETTARGETEND = 2193
SCI_REPLACETARGET = 2194
SCI_REPLACETARGETRE = 2195
SCI_SEARCHINTARGET = 2197
SCI_SETSEARCHFLAGS = 2198
SCI_GETSEARCHFLAGS = 2199
SCI_CALLTIPSHOW = 2200
SCI_CALLTIPCANCEL = 2201
SCI_CALLTIPACTIVE = 2202
SCI_CALLTIPPOSSTART = 2203
SCI_CALLTIPSETHLT = 2204
SCI_CALLTIPSETBACK = 2205
SCI_CALLTIPSETFORE = 2206
SCI_CALLTIPSETFOREHLT = 2207
SCI_CALLTIPUSESTYLE = 2212
SCI_VISIBLEFROMDOCLINE = 2220
SCI_DOCLINEFROMVISIBLE = 2221
SCI_WRAPCOUNT = 2235
SC_FOLDLEVELBASE = 0x400
SC_FOLDLEVELWHITEFLAG = 0x1000
SC_FOLDLEVELHEADERFLAG = 0x2000
SC_FOLDLEVELBOXHEADERFLAG = 0x4000
SC_FOLDLEVELBOXFOOTERFLAG = 0x8000
SC_FOLDLEVELCONTRACTED = 0x10000
SC_FOLDLEVELUNINDENT = 0x20000
SC_FOLDLEVELNUMBERMASK = 0x0FFF
SCI_SETFOLDLEVEL = 2222
SCI_GETFOLDLEVEL = 2223
SCI_GETLASTCHILD = 2224
SCI_GETFOLDPARENT = 2225
SCI_SHOWLINES = 2226
SCI_HIDELINES = 2227
SCI_GETLINEVISIBLE = 2228
SCI_SETFOLDEXPANDED = 2229
SCI_GETFOLDEXPANDED = 2230
SCI_TOGGLEFOLD = 2231
SCI_ENSUREVISIBLE = 2232
SC_FOLDFLAG_LINEBEFORE_EXPANDED = 0x0002
SC_FOLDFLAG_LINEBEFORE_CONTRACTED = 0x0004
SC_FOLDFLAG_LINEAFTER_EXPANDED = 0x0008
SC_FOLDFLAG_LINEAFTER_CONTRACTED = 0x0010
SC_FOLDFLAG_LEVELNUMBERS = 0x0040
SC_FOLDFLAG_BOX = 0x0001
SCI_SETFOLDFLAGS = 2233
SCI_ENSUREVISIBLEENFORCEPOLICY = 2234
SCI_SETTABINDENTS = 2260
SCI_GETTABINDENTS = 2261
SCI_SETBACKSPACEUNINDENTS = 2262
SCI_GETBACKSPACEUNINDENTS = 2263
SC_TIME_FOREVER = 10000000
SCI_SETMOUSEDWELLTIME = 2264
SCI_GETMOUSEDWELLTIME = 2265
SCI_WORDSTARTPOSITION = 2266
SCI_WORDENDPOSITION = 2267
SC_WRAP_NONE = 0
SC_WRAP_WORD = 1
SC_WRAP_CHAR = 2
SCI_SETWRAPMODE = 2268
SCI_GETWRAPMODE = 2269
SC_WRAPVISUALFLAG_NONE = 0x0000
SC_WRAPVISUALFLAG_END = 0x0001
SC_WRAPVISUALFLAG_START = 0x0002
SCI_SETWRAPVISUALFLAGS = 2460
SCI_GETWRAPVISUALFLAGS = 2461
SC_WRAPVISUALFLAGLOC_DEFAULT = 0x0000
SC_WRAPVISUALFLAGLOC_END_BY_TEXT = 0x0001
SC_WRAPVISUALFLAGLOC_START_BY_TEXT = 0x0002
SCI_SETWRAPVISUALFLAGSLOCATION = 2462
SCI_GETWRAPVISUALFLAGSLOCATION = 2463
SCI_SETWRAPSTARTINDENT = 2464
SCI_GETWRAPSTARTINDENT = 2465
SC_CACHE_NONE = 0
SC_CACHE_CARET = 1
SC_CACHE_PAGE = 2
SC_CACHE_DOCUMENT = 3
SCI_SETLAYOUTCACHE = 2272
SCI_GETLAYOUTCACHE = 2273
SCI_SETSCROLLWIDTH = 2274
SCI_GETSCROLLWIDTH = 2275
SCI_TEXTWIDTH = 2276
SCI_SETENDATLASTLINE = 2277
SCI_GETENDATLASTLINE = 2278
SCI_TEXTHEIGHT = 2279
SCI_SETVSCROLLBAR = 2280
SCI_GETVSCROLLBAR = 2281
SCI_APPENDTEXT = 2282
SCI_GETTWOPHASEDRAW = 2283
SCI_SETTWOPHASEDRAW = 2284
SCI_TARGETFROMSELECTION = 2287
SCI_LINESJOIN = 2288
SCI_LINESSPLIT = 2289
SCI_SETFOLDMARGINCOLOUR = 2290
SCI_SETFOLDMARGINHICOLOUR = 2291
SCI_LINEDOWN = 2300
SCI_LINEDOWNEXTEND = 2301
SCI_LINEUP = 2302
SCI_LINEUPEXTEND = 2303
SCI_CHARLEFT = 2304
SCI_CHARLEFTEXTEND = 2305
SCI_CHARRIGHT = 2306
SCI_CHARRIGHTEXTEND = 2307
SCI_WORDLEFT = 2308
SCI_WORDLEFTEXTEND = 2309
SCI_WORDRIGHT = 2310
SCI_WORDRIGHTEXTEND = 2311
SCI_HOME = 2312
SCI_HOMEEXTEND = 2313
SCI_LINEEND = 2314
SCI_LINEENDEXTEND = 2315
SCI_DOCUMENTSTART = 2316
SCI_DOCUMENTSTARTEXTEND = 2317
SCI_DOCUMENTEND = 2318
SCI_DOCUMENTENDEXTEND = 2319
SCI_PAGEUP = 2320
SCI_PAGEUPEXTEND = 2321
SCI_PAGEDOWN = 2322
SCI_PAGEDOWNEXTEND = 2323
SCI_EDITTOGGLEOVERTYPE = 2324
SCI_CANCEL = 2325
SCI_DELETEBACK = 2326
SCI_TAB = 2327
SCI_BACKTAB = 2328
SCI_NEWLINE = 2329
SCI_FORMFEED = 2330
SCI_VCHOME = 2331
SCI_VCHOMEEXTEND = 2332
SCI_ZOOMIN = 2333
SCI_ZOOMOUT = 2334
SCI_DELWORDLEFT = 2335
SCI_DELWORDRIGHT = 2336
SCI_LINECUT = 2337
SCI_LINEDELETE = 2338
SCI_LINETRANSPOSE = 2339
SCI_LINEDUPLICATE = 2404
SCI_LOWERCASE = 2340
SCI_UPPERCASE = 2341
SCI_LINESCROLLDOWN = 2342
SCI_LINESCROLLUP = 2343
SCI_DELETEBACKNOTLINE = 2344
SCI_HOMEDISPLAY = 2345
SCI_HOMEDISPLAYEXTEND = 2346
SCI_LINEENDDISPLAY = 2347
SCI_LINEENDDISPLAYEXTEND = 2348
SCI_HOMEWRAP = 2349
SCI_HOMEWRAPEXTEND = 2450
SCI_LINEENDWRAP = 2451
SCI_LINEENDWRAPEXTEND = 2452
SCI_VCHOMEWRAP = 2453
SCI_VCHOMEWRAPEXTEND = 2454
SCI_LINECOPY = 2455
SCI_MOVECARETINSIDEVIEW = 2401
SCI_LINELENGTH = 2350
SCI_BRACEHIGHLIGHT = 2351
SCI_BRACEBADLIGHT = 2352
SCI_BRACEMATCH = 2353
SCI_GETVIEWEOL = 2355
SCI_SETVIEWEOL = 2356
SCI_GETDOCPOINTER = 2357
SCI_SETDOCPOINTER = 2358
SCI_SETMODEVENTMASK = 2359
EDGE_NONE = 0
EDGE_LINE = 1
EDGE_BACKGROUND = 2
SCI_GETEDGECOLUMN = 2360
SCI_SETEDGECOLUMN = 2361
SCI_GETEDGEMODE = 2362
SCI_SETEDGEMODE = 2363
SCI_GETEDGECOLOUR = 2364
SCI_SETEDGECOLOUR = 2365
SCI_SEARCHANCHOR = 2366
SCI_SEARCHNEXT = 2367
SCI_SEARCHPREV = 2368
SCI_LINESONSCREEN = 2370
SCI_USEPOPUP = 2371
SCI_SELECTIONISRECTANGLE = 2372
SCI_SETZOOM = 2373
SCI_GETZOOM = 2374
SCI_CREATEDOCUMENT = 2375
SCI_ADDREFDOCUMENT = 2376
SCI_RELEASEDOCUMENT = 2377
SCI_GETMODEVENTMASK = 2378
SCI_SETFOCUS = 2380
SCI_GETFOCUS = 2381
SCI_SETSTATUS = 2382
SCI_GETSTATUS = 2383
SCI_SETMOUSEDOWNCAPTURES = 2384
SCI_GETMOUSEDOWNCAPTURES = 2385
SC_CURSORNORMAL = -1
SC_CURSORWAIT = 4
SCI_SETCURSOR = 2386
SCI_GETCURSOR = 2387
SCI_SETCONTROLCHARSYMBOL = 2388
SCI_GETCONTROLCHARSYMBOL = 2389
SCI_WORDPARTLEFT = 2390
SCI_WORDPARTLEFTEXTEND = 2391
SCI_WORDPARTRIGHT = 2392
SCI_WORDPARTRIGHTEXTEND = 2393
VISIBLE_SLOP = 0x01
VISIBLE_STRICT = 0x04
SCI_SETVISIBLEPOLICY = 2394
SCI_DELLINELEFT = 2395
SCI_DELLINERIGHT = 2396
SCI_SETXOFFSET = 2397
SCI_GETXOFFSET = 2398
SCI_CHOOSECARETX = 2399
SCI_GRABFOCUS = 2400
CARET_SLOP = 0x01
CARET_STRICT = 0x04
CARET_JUMPS = 0x10
CARET_EVEN = 0x08
SCI_SETXCARETPOLICY = 2402
SCI_SETYCARETPOLICY = 2403
SCI_SETPRINTWRAPMODE = 2406
SCI_GETPRINTWRAPMODE = 2407
SCI_SETHOTSPOTACTIVEFORE = 2410
SCI_SETHOTSPOTACTIVEBACK = 2411
SCI_SETHOTSPOTACTIVEUNDERLINE = 2412
SCI_SETHOTSPOTSINGLELINE = 2421
SCI_PARADOWN = 2413
SCI_PARADOWNEXTEND = 2414
SCI_PARAUP = 2415
SCI_PARAUPEXTEND = 2416
SCI_POSITIONBEFORE = 2417
SCI_POSITIONAFTER = 2418
SCI_COPYRANGE = 2419
SCI_COPYTEXT = 2420
SC_SEL_STREAM = 0
SC_SEL_RECTANGLE = 1
SC_SEL_LINES = 2
SCI_SETSELECTIONMODE = 2422
SCI_GETSELECTIONMODE = 2423
SCI_GETLINESELSTARTPOSITION = 2424
SCI_GETLINESELENDPOSITION = 2425
SCI_LINEDOWNRECTEXTEND = 2426
SCI_LINEUPRECTEXTEND = 2427
SCI_CHARLEFTRECTEXTEND = 2428
SCI_CHARRIGHTRECTEXTEND = 2429
SCI_HOMERECTEXTEND = 2430
SCI_VCHOMERECTEXTEND = 2431
SCI_LINEENDRECTEXTEND = 2432
SCI_PAGEUPRECTEXTEND = 2433
SCI_PAGEDOWNRECTEXTEND = 2434
SCI_STUTTEREDPAGEUP = 2435
SCI_STUTTEREDPAGEUPEXTEND = 2436
SCI_STUTTEREDPAGEDOWN = 2437
SCI_STUTTEREDPAGEDOWNEXTEND = 2438
SCI_WORDLEFTEND = 2439
SCI_WORDLEFTENDEXTEND = 2440
SCI_WORDRIGHTEND = 2441
SCI_WORDRIGHTENDEXTEND = 2442
SCI_SETWHITESPACECHARS = 2443
SCI_SETCHARSDEFAULT = 2444
SCI_AUTOCGETCURRENT = 2445
SCI_ALLOCATE = 2446
SCI_TARGETASUTF8 = 2447
SCI_SETLENGTHFORENCODE = 2448
SCI_ENCODEDFROMUTF8 = 2449
SCI_FINDCOLUMN = 2456
SCI_GETCARETSTICKY = 2457
SCI_SETCARETSTICKY = 2458
SCI_TOGGLECARETSTICKY = 2459
SCI_SETPASTECONVERTENDINGS = 2467
SCI_GETPASTECONVERTENDINGS = 2468
SCI_SELECTIONDUPLICATE = 2469
SC_ALPHA_TRANSPARENT = 0
SC_ALPHA_OPAQUE = 255
SC_ALPHA_NOALPHA = 256
SCI_SETCARETLINEBACKALPHA = 2470
SCI_GETCARETLINEBACKALPHA = 2471
SCI_STARTRECORD = 3001
SCI_STOPRECORD = 3002
SCI_SETLEXER = 4001
SCI_GETLEXER = 4002
SCI_COLOURISE = 4003
SCI_SETPROPERTY = 4004
KEYWORDSET_MAX = 8
SCI_SETKEYWORDS = 4005
SCI_SETLEXERLANGUAGE = 4006
SCI_LOADLEXERLIBRARY = 4007
SCI_GETPROPERTY = 4008
SCI_GETPROPERTYEXPANDED = 4009
SCI_GETPROPERTYINT = 4010
SCI_GETSTYLEBITSNEEDED = 4011
SC_MOD_INSERTTEXT = 0x1
SC_MOD_DELETETEXT = 0x2
SC_MOD_CHANGESTYLE = 0x4
SC_MOD_CHANGEFOLD = 0x8
SC_PERFORMED_USER = 0x10
SC_PERFORMED_UNDO = 0x20
SC_PERFORMED_REDO = 0x40
SC_MULTISTEPUNDOREDO = 0x80
SC_LASTSTEPINUNDOREDO = 0x100
SC_MOD_CHANGEMARKER = 0x200
SC_MOD_BEFOREINSERT = 0x400
SC_MOD_BEFOREDELETE = 0x800
SC_MULTILINEUNDOREDO = 0x1000
SC_MODEVENTMASKALL = 0x1FFF
SCEN_CHANGE = 768
SCEN_SETFOCUS = 512
SCEN_KILLFOCUS = 256
SCK_DOWN = 300
SCK_UP = 301
SCK_LEFT = 302
SCK_RIGHT = 303
SCK_HOME = 304
SCK_END = 305
SCK_PRIOR = 306
SCK_NEXT = 307
SCK_DELETE = 308
SCK_INSERT = 309
SCK_ESCAPE = 7
SCK_BACK = 8
SCK_TAB = 9
SCK_RETURN = 13
SCK_ADD = 310
SCK_SUBTRACT = 311
SCK_DIVIDE = 312
SCK_WIN = 313
SCK_MENU = 314
SCMOD_NORM = 0
SCMOD_SHIFT = 1
SCMOD_CTRL = 2
SCMOD_ALT = 4
SCN_STYLENEEDED = 2000
SCN_CHARADDED = 2001
SCN_SAVEPOINTREACHED = 2002
SCN_SAVEPOINTLEFT = 2003
SCN_MODIFYATTEMPTRO = 2004
SCN_KEY = 2005
SCN_DOUBLECLICK = 2006
SCN_UPDATEUI = 2007
SCN_MODIFIED = 2008
SCN_MACRORECORD = 2009
SCN_MARGINCLICK = 2010
SCN_NEEDSHOWN = 2011
SCN_PAINTED = 2013
SCN_USERLISTSELECTION = 2014
SCN_URIDROPPED = 2015
SCN_DWELLSTART = 2016
SCN_DWELLEND = 2017
SCN_ZOOM = 2018
SCN_HOTSPOTCLICK = 2019
SCN_HOTSPOTDOUBLECLICK = 2020
SCN_CALLTIPCLICK = 2021
SCN_AUTOCSELECTION = 2022

# File
IDM_NEW = 101
IDM_OPEN = 102
IDM_OPENSELECTED = 103
IDM_REVERT = 104
IDM_CLOSE = 105
IDM_SAVE = 106
IDM_SAVEAS = 110
IDM_SAVEACOPY = 116
IDM_ENCODING_DEFAULT = 150
IDM_ENCODING_UCS2BE = 151
IDM_ENCODING_UCS2LE = 152
IDM_ENCODING_UTF8 = 153
IDM_ENCODING_UCOOKIE = 154
IDM_SAVEASHTML = 111
IDM_SAVEASRTF = 112
IDM_SAVEASPDF = 113
IDM_SAVEASTEX = 115
IDM_SAVEASXML = 117
IDM_PRINTSETUP = 130
IDM_PRINT = 131
IDM_LOADSESSION = 132
IDM_SAVESESSION = 133
IDM_FILER = 114
IDM_QUIT = 140

# Edit
IDM_UNDO = 201
IDM_REDO = 202
IDM_CUT = 203
IDM_COPY = 204
IDM_PASTE = 205
IDM_DUPLICATE = 250
IDM_CLEAR = 206
IDM_SELECTALL = 207
IDM_PASTEANDDOWN = 208
IDM_COPYASRTF = 245
IDM_MATCHBRACE = 230
IDM_SELECTTOBRACE = 231
IDM_SHOWCALLTIP = 232
IDM_COMPLETE = 233
IDM_COMPLETEWORD = 234
IDM_ABBREV = 242
IDM_INS_ABBREV = 247
IDM_BLOCK_COMMENT = 243
IDM_BOX_COMMENT = 246
IDM_STREAM_COMMENT = 244
IDM_UPRCASE = 240
IDM_LWRCASE = 241
IDM_JOIN = 248
IDM_SPLIT = 249

# Search
IDM_FIND = 210
IDM_FINDNEXT = 211
IDM_FINDNEXTBACK = 212
IDM_FINDNEXTSEL = 213
IDM_FINDNEXTBACKSEL = 214
IDM_FINDINFILES = 215
IDM_REPLACE = 216
IDM_INCSEARCH  = 252
IDM_GOTO = 220
IDM_BOOKMARK_NEXT = 221
IDM_BOOKMARK_PREV = 223
IDM_BOOKMARK_TOGGLE = 222
IDM_BOOKMARK_CLEARALL = 224
IDM_BOOKMARK_NEXT_SELECT = 225
IDM_BOOKMARK_PREV_SELECT = 226

# View
IDM_EXPAND = 235
IDM_TOGGLE_FOLDALL = 236
IDM_TOGGLE_FOLDRECURSIVE = 237
IDM_EXPAND_ENSURECHILDRENVISIBLE = 238
IDM_FULLSCREEN = 961
IDM_VIEWTOOLBAR = 408
IDM_VIEWTABBAR = 410
IDM_VIEWSTATUSBAR = 411
IDM_VIEWSPACE = 402
IDM_VIEWEOL = 403
IDM_VIEWGUIDES = 404
IDM_LINENUMBERMARGIN = 407
IDM_SELMARGIN = 405
IDM_FOLDMARGIN = 406
IDM_TOGGLEOUTPUT = 409
IDM_TOGGLEPARAMETERS = 412

# Tools
IDM_COMPILE = 301
IDM_BUILD = 302
IDM_GO = 303
IDM_STOPEXECUTE = 304
IDM_FINISHEDEXECUTE = 305
IDM_MACROLIST = 314
IDM_MACROPLAY = 313
IDM_MACRORECORD = 311
IDM_MACROSTOPRECORD = 312
IDM_NEXTMSG = 306
IDM_PREVMSG = 307
IDM_CLEAROUTPUT = 420
IDM_SWITCHPANE = 421

# Options
IDM_ONTOP = 960
IDM_OPENFILESHERE = 413
IDM_SPLITVERTICAL = 401
IDM_WRAP = 414
IDM_WRAPOUTPUT = 415
IDM_READONLY = 416
IDM_EOL_CRLF = 430
IDM_EOL_CR = 431
IDM_EOL_LF = 432
IDM_EOL_CONVERT = 433
IDM_TABSIZE = 440
IDM_MONOFONT = 450
IDM_OPENLOCALPROPERTIES = 460
IDM_OPENUSERPROPERTIES = 461
IDM_OPENGLOBALPROPERTIES = 462
IDM_OPENABBREVPROPERTIES = 463
IDM_OPENLUAEXTERNALFILE = 464

# Buffers
IDM_PREVFILE = 501
IDM_NEXTFILE = 502
IDM_CLOSEALL = 503
IDM_SAVEALL = 504

# Help
IDM_HELP = 901
IDM_HELP_SCITE = 903
IDM_ABOUT = 902

IDM_PREVMATCHPPC = 260
IDM_SELECTTOPREVMATCHPPC = 261
IDM_NEXTMATCHPPC = 262
IDM_SELECTTONEXTMATCHPPC = 263

FilePath \n full path of the current file
FileDir \n directory of the current file without a trailing slash
FileName \n base name of the current file
FileExt \n extension of the current file
FileNameExt \n $(FileName).$(FileExt)
SessionPath \n full path of the current session
CurrentSelection \n value of the currently selected text
CurrentWord \n value of word which the caret is within or near
Replacements \n number of replacements made by last Replace command
SelectionStartColumn \n column where selection starts
SelectionStartLine \n line where selection starts
SelectionEndColumn \n column where selection ends
SelectionEndLine \n line where selection ends
CurrentMessage \n most recently selected output pane message
SciteDefaultHome \n directory in which the Global Options file is found
SciteUserHome \n directory in which the User Options file is found
SciteDirectoryHome \n directory in which the Directory Options file is found
